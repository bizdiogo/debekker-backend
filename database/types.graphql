type Client {
  address: String
  createdAt: DateTime!
  email: String!
  events: [Event!]!
  id: ID! @unique
  name: String!
  offers: [Offer!]!
  phone: String!
  tva: String
  clientContacts: [ClientContact!]!
  language: LanguageEnum
  communications: [Communication!]!
  type: ClientType
}

type Communication {
  id: ID! @unique
  message: String!
  subject: String!
  channel: Channel!
  date: DateTime!
  gmtOffset: String!
  offer: Offer
}

type Event {
  id: ID! @unique
  offer: Offer
  employees: [Employee!]!
  stuffs: [Stuff!]!
  vehicles: [Vehicle!]!
}

type Offer {
  client: Client
  createdAt: DateTime!
  customMessage: String
  event: Event
  id: ID! @unique
  status: StatusOffer! @default(value: Pending)
  language: LanguageEnum @default(value: FR)
  address: String!
  budgetLines: [BudgetLine!]!
  city: String!
  clientContact: ClientContact
  employeeEstimations: [EmployeeEstimation!]!
  endTime: DateTime
  eventType: EventType
  gmtOffset: String!
  maxPersons: Int @default(value: 0)
  minPersons: Int @default(value: 0)
  name: String!
  place: Place
  postalCode: String!
  sectionItems: [SectionItem!]!
  showTotalBudgetsPdf: Boolean @default(value: false)
  startTime: DateTime
  version: Int @default(value: 1)
}

type ItemTranslation {
  description: String
  id: ID! @unique
  items: Item
  internalDescription: String
  language: LanguageEnum!
  name: String
}

type Item {
  id: ID! @unique
  platTranslations: [ItemTranslation!]!
  categories: [Category!]!
  sectionItems: [SectionItem!]!
}

type User {
  createdAt: DateTime!
  id: ID! @unique
  role: Role!
  updatedAt: DateTime!
  email: String! @unique
  image: String
  name: String!
  password: String!
  employee: Employee
  jobs: [Job!]!
  language: LanguageEnum
}

type ClientContact {
  client: Client
  email: String!
  id: ID! @unique
  mobilePhone: String
  name: String!
  phoneNumber: String
  offers: [Offer!]!
}

type Place {
  address: String!
  city: String!
  id: ID! @unique
  name: String!
  postalCode: String!
  country: Country @default(value: BE)
  note: String
  offer: Offer
  placeContacts: [PlaceContact!]!
}

type BudgetLine {
  description: String!
  id: ID! @unique
  offer: Offer
  quantity: Int
  tax: Tax
  total: Float
  unitPrice: Float
  value: Float!
}

type Category @model {
  id: ID! @unique
  name: String!
  items: [Item!]!
}

type Employee {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  event: Event
  id: ID! @unique
  job: Job
  startedAt: DateTime
  user: User
}

type EmployeeEstimation {
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  id: ID! @unique
  job: Job
  number: Int!
  offer: Offer
  pricePerHour: Float! @default(value: 0.0)
  total: Float! @default(value: 0.0)
}

type EventStuff @model {
  event: Event
  id: ID! @unique
  quantity: Int! @default(value: 0)
  stuff: Stuff
}

type EventType {
  id: ID! @unique
  name: String!
  offers: [Offer!]!
}

type Job {
  employeeEstimations: [EmployeeEstimation!]!
  employees: [Employee!]!
  id: ID! @unique
  name: String!
  users: [User!]!
}

type PlaceContact {
  email: String
  id: ID! @unique
  mobilePhone: String
  name: String!
  phoneNumber: String
  place: Place
}

type SectionItem {
  content: String @default(value: "''")
  endTime: DateTime
  h: Int!
  i: String!
  id: ID! @unique
  isDraggable: Boolean @default(value: true)
  isResizable: Boolean @default(value: false)
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean @default(value: false)
  offer: Offer
  persons: Int @default(value: 0)
  items: [Item!]!
  price: Float @default(value: 0.0)
  static: Boolean @default(value: false)
  startTime: DateTime
  title: String @default(value: "''")
  type: SectionTypes! @default(value: Title)
  w: Int!
  x: Int!
  y: Int! @default(value: 0)
}

type Stuff {
  eventStuffs: [EventStuff!]!
  id: ID! @unique
  name: String!
}

type Tax {
  budgetLines: [BudgetLine!]!
  id: ID! @unique
  name: String!
  value: Float!
}

type Vehicle {
  color: String
  description: String
  events: [Event!]!
  id: ID! @unique
  name: String!
  plate: String!
  year: Int
}

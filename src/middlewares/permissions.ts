import { rule, shield } from 'graphql-shield'
import { getAuthPayload } from '../utils'

const isAuthenticated = rule()(async (resolve, args, ctx, info) => {
  return !!getAuthPayload(ctx)
})

export default shield({
  Query: {
    me: isAuthenticated,
    users: isAuthenticated,
    user: isAuthenticated,
    vehicles: isAuthenticated,
    vehicle: isAuthenticated,
    taxes: isAuthenticated,
    tax: isAuthenticated,
    places: isAuthenticated,
    place: isAuthenticated,
    offers: isAuthenticated,
    offer: isAuthenticated,
    jobs: isAuthenticated,
    job: isAuthenticated,
    items: isAuthenticated,
    item: isAuthenticated,
    eventTypes: isAuthenticated,
    eventType: isAuthenticated,
    events: isAuthenticated,
    event: isAuthenticated,
    clients: isAuthenticated,
    client: isAuthenticated,
  },
  Mutation: {
    createUser: isAuthenticated,
    updateUser: isAuthenticated,
    deleteUser: isAuthenticated,
    createVehicle: isAuthenticated,
    updateVehicle: isAuthenticated,
    deleteVehicle: isAuthenticated,
    createTax: isAuthenticated,
    updateTax: isAuthenticated,
    deleteTax: isAuthenticated,
    createPlace: isAuthenticated,
    updatePlace: isAuthenticated,
    deletePlace: isAuthenticated,
    createOffer: isAuthenticated,
    updateOffer: isAuthenticated,
    deleteOffer: isAuthenticated,
    createJob: isAuthenticated,
    updateJob: isAuthenticated,
    deleteJob: isAuthenticated,
    createItem: isAuthenticated,
    updateItem: isAuthenticated,
    deleteItem: isAuthenticated,
    createEventType: isAuthenticated,
    updateEventType: isAuthenticated,
    deleteEventType: isAuthenticated,
    createEvent: isAuthenticated,
    updateEvent: isAuthenticated,
    deleteEvent: isAuthenticated,
    createClient: isAuthenticated,
    updateClient: isAuthenticated,
    deleteClient: isAuthenticated,
  },
  Subscription: {
    user: isAuthenticated,
    vehicle: isAuthenticated,
    tax: isAuthenticated,
    place: isAuthenticated,
    offer: isAuthenticated,
    job: isAuthenticated,
    item: isAuthenticated,
    eventType: isAuthenticated,
    event: isAuthenticated,
    client: isAuthenticated,
  },
})

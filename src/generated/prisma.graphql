# source: http://localhost:4466
# timestamp: Fri Mar 08 2019 09:58:26 GMT-0300 (GMT-03:00)

enum Account {
  Invoice
  CreditNote
}

type AggregateBudget {
  count: Int!
}

type AggregateBudgetLine {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateClient {
  count: Int!
}

type AggregateClientContact {
  count: Int!
}

type AggregateCommunication {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateEmployee {
  count: Int!
}

type AggregateEmployeeEstimation {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateEventStuff {
  count: Int!
}

type AggregateEventType {
  count: Int!
}

type AggregateInvoice {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateItemProposal {
  count: Int!
}

type AggregateItemProposalFlag {
  count: Int!
}

type AggregateItemTranslation {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregateMenu {
  count: Int!
}

type AggregateOffer {
  count: Int!
}

type AggregatePlace {
  count: Int!
}

type AggregatePlaceContact {
  count: Int!
}

type AggregateSection {
  count: Int!
}

type AggregateSectionItem {
  count: Int!
}

type AggregateStuff {
  count: Int!
}

type AggregateTax {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVehicle {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Budget implements Node {
  description: String!
  id: ID!
  invoice(where: InvoiceWhereInput): Invoice
  quantity: Int!
  tax(where: TaxWhereInput): Tax
  total: Float!
  unitPrice: Float!
}

"""A connection to a list of items."""
type BudgetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BudgetEdge]!
  aggregate: AggregateBudget!
}

input BudgetCreateInput {
  description: String!
  quantity: Int!
  total: Float!
  unitPrice: Float!
  invoice: InvoiceCreateOneWithoutBudgetsInput
  tax: TaxCreateOneWithoutBudgetsInput
}

input BudgetCreateManyWithoutInvoiceInput {
  create: [BudgetCreateWithoutInvoiceInput!]
  connect: [BudgetWhereUniqueInput!]
}

input BudgetCreateManyWithoutTaxInput {
  create: [BudgetCreateWithoutTaxInput!]
  connect: [BudgetWhereUniqueInput!]
}

input BudgetCreateWithoutInvoiceInput {
  description: String!
  quantity: Int!
  total: Float!
  unitPrice: Float!
  tax: TaxCreateOneWithoutBudgetsInput
}

input BudgetCreateWithoutTaxInput {
  description: String!
  quantity: Int!
  total: Float!
  unitPrice: Float!
  invoice: InvoiceCreateOneWithoutBudgetsInput
}

"""An edge in a connection."""
type BudgetEdge {
  """The item at the end of the edge."""
  node: Budget!

  """A cursor for use in pagination."""
  cursor: String!
}

type BudgetLine implements Node {
  description: String!
  id: ID!
  offer(where: OfferWhereInput): Offer
  quantity: Int
  tax(where: TaxWhereInput): Tax
  total: Float
  unitPrice: Float
  value: Float!
}

"""A connection to a list of items."""
type BudgetLineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BudgetLineEdge]!
  aggregate: AggregateBudgetLine!
}

input BudgetLineCreateInput {
  description: String!
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float!
  offer: OfferCreateOneWithoutBudgetLinesInput
  tax: TaxCreateOneWithoutBudgetLinesInput
}

input BudgetLineCreateManyWithoutOfferInput {
  create: [BudgetLineCreateWithoutOfferInput!]
  connect: [BudgetLineWhereUniqueInput!]
}

input BudgetLineCreateManyWithoutTaxInput {
  create: [BudgetLineCreateWithoutTaxInput!]
  connect: [BudgetLineWhereUniqueInput!]
}

input BudgetLineCreateWithoutOfferInput {
  description: String!
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float!
  tax: TaxCreateOneWithoutBudgetLinesInput
}

input BudgetLineCreateWithoutTaxInput {
  description: String!
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float!
  offer: OfferCreateOneWithoutBudgetLinesInput
}

"""An edge in a connection."""
type BudgetLineEdge {
  """The item at the end of the edge."""
  node: BudgetLine!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BudgetLineOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  total_ASC
  total_DESC
  unitPrice_ASC
  unitPrice_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BudgetLinePreviousValues {
  description: String!
  id: ID!
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float!
}

type BudgetLineSubscriptionPayload {
  mutation: MutationType!
  node: BudgetLine
  updatedFields: [String!]
  previousValues: BudgetLinePreviousValues
}

input BudgetLineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BudgetLineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BudgetLineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BudgetLineSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BudgetLineWhereInput
}

input BudgetLineUpdateInput {
  description: String
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float
  offer: OfferUpdateOneWithoutBudgetLinesInput
  tax: TaxUpdateOneWithoutBudgetLinesInput
}

input BudgetLineUpdateManyWithoutOfferInput {
  create: [BudgetLineCreateWithoutOfferInput!]
  connect: [BudgetLineWhereUniqueInput!]
  disconnect: [BudgetLineWhereUniqueInput!]
  delete: [BudgetLineWhereUniqueInput!]
  update: [BudgetLineUpdateWithWhereUniqueWithoutOfferInput!]
  upsert: [BudgetLineUpsertWithWhereUniqueWithoutOfferInput!]
}

input BudgetLineUpdateManyWithoutTaxInput {
  create: [BudgetLineCreateWithoutTaxInput!]
  connect: [BudgetLineWhereUniqueInput!]
  disconnect: [BudgetLineWhereUniqueInput!]
  delete: [BudgetLineWhereUniqueInput!]
  update: [BudgetLineUpdateWithWhereUniqueWithoutTaxInput!]
  upsert: [BudgetLineUpsertWithWhereUniqueWithoutTaxInput!]
}

input BudgetLineUpdateWithoutOfferDataInput {
  description: String
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float
  tax: TaxUpdateOneWithoutBudgetLinesInput
}

input BudgetLineUpdateWithoutTaxDataInput {
  description: String
  quantity: Int
  total: Float
  unitPrice: Float
  value: Float
  offer: OfferUpdateOneWithoutBudgetLinesInput
}

input BudgetLineUpdateWithWhereUniqueWithoutOfferInput {
  where: BudgetLineWhereUniqueInput!
  data: BudgetLineUpdateWithoutOfferDataInput!
}

input BudgetLineUpdateWithWhereUniqueWithoutTaxInput {
  where: BudgetLineWhereUniqueInput!
  data: BudgetLineUpdateWithoutTaxDataInput!
}

input BudgetLineUpsertWithWhereUniqueWithoutOfferInput {
  where: BudgetLineWhereUniqueInput!
  update: BudgetLineUpdateWithoutOfferDataInput!
  create: BudgetLineCreateWithoutOfferInput!
}

input BudgetLineUpsertWithWhereUniqueWithoutTaxInput {
  where: BudgetLineWhereUniqueInput!
  update: BudgetLineUpdateWithoutTaxDataInput!
  create: BudgetLineCreateWithoutTaxInput!
}

input BudgetLineWhereInput {
  """Logical AND on all given filters."""
  AND: [BudgetLineWhereInput!]

  """Logical OR on all given filters."""
  OR: [BudgetLineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BudgetLineWhereInput!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  offer: OfferWhereInput
  tax: TaxWhereInput
}

input BudgetLineWhereUniqueInput {
  id: ID
}

enum BudgetOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  total_ASC
  total_DESC
  unitPrice_ASC
  unitPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BudgetPreviousValues {
  description: String!
  id: ID!
  quantity: Int!
  total: Float!
  unitPrice: Float!
}

type BudgetSubscriptionPayload {
  mutation: MutationType!
  node: Budget
  updatedFields: [String!]
  previousValues: BudgetPreviousValues
}

input BudgetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BudgetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BudgetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BudgetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BudgetWhereInput
}

input BudgetUpdateInput {
  description: String
  quantity: Int
  total: Float
  unitPrice: Float
  invoice: InvoiceUpdateOneWithoutBudgetsInput
  tax: TaxUpdateOneWithoutBudgetsInput
}

input BudgetUpdateManyWithoutInvoiceInput {
  create: [BudgetCreateWithoutInvoiceInput!]
  connect: [BudgetWhereUniqueInput!]
  disconnect: [BudgetWhereUniqueInput!]
  delete: [BudgetWhereUniqueInput!]
  update: [BudgetUpdateWithWhereUniqueWithoutInvoiceInput!]
  upsert: [BudgetUpsertWithWhereUniqueWithoutInvoiceInput!]
}

input BudgetUpdateManyWithoutTaxInput {
  create: [BudgetCreateWithoutTaxInput!]
  connect: [BudgetWhereUniqueInput!]
  disconnect: [BudgetWhereUniqueInput!]
  delete: [BudgetWhereUniqueInput!]
  update: [BudgetUpdateWithWhereUniqueWithoutTaxInput!]
  upsert: [BudgetUpsertWithWhereUniqueWithoutTaxInput!]
}

input BudgetUpdateWithoutInvoiceDataInput {
  description: String
  quantity: Int
  total: Float
  unitPrice: Float
  tax: TaxUpdateOneWithoutBudgetsInput
}

input BudgetUpdateWithoutTaxDataInput {
  description: String
  quantity: Int
  total: Float
  unitPrice: Float
  invoice: InvoiceUpdateOneWithoutBudgetsInput
}

input BudgetUpdateWithWhereUniqueWithoutInvoiceInput {
  where: BudgetWhereUniqueInput!
  data: BudgetUpdateWithoutInvoiceDataInput!
}

input BudgetUpdateWithWhereUniqueWithoutTaxInput {
  where: BudgetWhereUniqueInput!
  data: BudgetUpdateWithoutTaxDataInput!
}

input BudgetUpsertWithWhereUniqueWithoutInvoiceInput {
  where: BudgetWhereUniqueInput!
  update: BudgetUpdateWithoutInvoiceDataInput!
  create: BudgetCreateWithoutInvoiceInput!
}

input BudgetUpsertWithWhereUniqueWithoutTaxInput {
  where: BudgetWhereUniqueInput!
  update: BudgetUpdateWithoutTaxDataInput!
  create: BudgetCreateWithoutTaxInput!
}

input BudgetWhereInput {
  """Logical AND on all given filters."""
  AND: [BudgetWhereInput!]

  """Logical OR on all given filters."""
  OR: [BudgetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BudgetWhereInput!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  invoice: InvoiceWhereInput
  tax: TaxWhereInput
}

input BudgetWhereUniqueInput {
  id: ID
}

type Category implements Node {
  id: ID!
  name: String!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  items: ItemCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutItemsInput {
  create: [CategoryCreateWithoutItemsInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutItemsInput {
  name: String!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  name: String
  items: ItemUpdateManyWithoutCategoriesInput
}

input CategoryUpdateManyWithoutItemsInput {
  create: [CategoryCreateWithoutItemsInput!]
  connect: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutItemsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutItemsInput!]
}

input CategoryUpdateWithoutItemsDataInput {
  name: String
}

input CategoryUpdateWithWhereUniqueWithoutItemsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutItemsDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutItemsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutItemsDataInput!
  create: CategoryCreateWithoutItemsInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

enum Channel {
  Email
  Phone
  Call
  Message
}

type Client implements Node {
  address: String
  createdAt: DateTime!
  email: String!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  id: ID!
  name: String!
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer!]
  phone: String!
  tva: String
  clientContacts(where: ClientContactWhereInput, orderBy: ClientContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClientContact!]
  language: LanguageEnum
  type: ClientType
  country(where: CountryWhereInput): Country
  postalCode: String!
}

"""A connection to a list of items."""
type ClientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClientEdge]!
  aggregate: AggregateClient!
}

type ClientContact implements Node {
  client(where: ClientWhereInput): Client
  email: String!
  id: ID!
  mobilePhone: String
  name: String!
  phoneNumber: String
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer!]
}

"""A connection to a list of items."""
type ClientContactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClientContactEdge]!
  aggregate: AggregateClientContact!
}

input ClientContactCreateInput {
  email: String!
  mobilePhone: String
  name: String!
  phoneNumber: String
  client: ClientCreateOneWithoutClientContactsInput
  offers: OfferCreateManyWithoutClientContactInput
}

input ClientContactCreateManyWithoutClientInput {
  create: [ClientContactCreateWithoutClientInput!]
  connect: [ClientContactWhereUniqueInput!]
}

input ClientContactCreateOneWithoutOffersInput {
  create: ClientContactCreateWithoutOffersInput
  connect: ClientContactWhereUniqueInput
}

input ClientContactCreateWithoutClientInput {
  email: String!
  mobilePhone: String
  name: String!
  phoneNumber: String
  offers: OfferCreateManyWithoutClientContactInput
}

input ClientContactCreateWithoutOffersInput {
  email: String!
  mobilePhone: String
  name: String!
  phoneNumber: String
  client: ClientCreateOneWithoutClientContactsInput
}

"""An edge in a connection."""
type ClientContactEdge {
  """The item at the end of the edge."""
  node: ClientContact!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClientContactOrderByInput {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  mobilePhone_ASC
  mobilePhone_DESC
  name_ASC
  name_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClientContactPreviousValues {
  email: String!
  id: ID!
  mobilePhone: String
  name: String!
  phoneNumber: String
}

type ClientContactSubscriptionPayload {
  mutation: MutationType!
  node: ClientContact
  updatedFields: [String!]
  previousValues: ClientContactPreviousValues
}

input ClientContactSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientContactSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientContactSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientContactSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClientContactWhereInput
}

input ClientContactUpdateInput {
  email: String
  mobilePhone: String
  name: String
  phoneNumber: String
  client: ClientUpdateOneWithoutClientContactsInput
  offers: OfferUpdateManyWithoutClientContactInput
}

input ClientContactUpdateManyWithoutClientInput {
  create: [ClientContactCreateWithoutClientInput!]
  connect: [ClientContactWhereUniqueInput!]
  disconnect: [ClientContactWhereUniqueInput!]
  delete: [ClientContactWhereUniqueInput!]
  update: [ClientContactUpdateWithWhereUniqueWithoutClientInput!]
  upsert: [ClientContactUpsertWithWhereUniqueWithoutClientInput!]
}

input ClientContactUpdateOneWithoutOffersInput {
  create: ClientContactCreateWithoutOffersInput
  connect: ClientContactWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClientContactUpdateWithoutOffersDataInput
  upsert: ClientContactUpsertWithoutOffersInput
}

input ClientContactUpdateWithoutClientDataInput {
  email: String
  mobilePhone: String
  name: String
  phoneNumber: String
  offers: OfferUpdateManyWithoutClientContactInput
}

input ClientContactUpdateWithoutOffersDataInput {
  email: String
  mobilePhone: String
  name: String
  phoneNumber: String
  client: ClientUpdateOneWithoutClientContactsInput
}

input ClientContactUpdateWithWhereUniqueWithoutClientInput {
  where: ClientContactWhereUniqueInput!
  data: ClientContactUpdateWithoutClientDataInput!
}

input ClientContactUpsertWithoutOffersInput {
  update: ClientContactUpdateWithoutOffersDataInput!
  create: ClientContactCreateWithoutOffersInput!
}

input ClientContactUpsertWithWhereUniqueWithoutClientInput {
  where: ClientContactWhereUniqueInput!
  update: ClientContactUpdateWithoutClientDataInput!
  create: ClientContactCreateWithoutClientInput!
}

input ClientContactWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientContactWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientContactWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientContactWhereInput!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  mobilePhone: String

  """All values that are not equal to given value."""
  mobilePhone_not: String

  """All values that are contained in given list."""
  mobilePhone_in: [String!]

  """All values that are not contained in given list."""
  mobilePhone_not_in: [String!]

  """All values less than the given value."""
  mobilePhone_lt: String

  """All values less than or equal the given value."""
  mobilePhone_lte: String

  """All values greater than the given value."""
  mobilePhone_gt: String

  """All values greater than or equal the given value."""
  mobilePhone_gte: String

  """All values containing the given string."""
  mobilePhone_contains: String

  """All values not containing the given string."""
  mobilePhone_not_contains: String

  """All values starting with the given string."""
  mobilePhone_starts_with: String

  """All values not starting with the given string."""
  mobilePhone_not_starts_with: String

  """All values ending with the given string."""
  mobilePhone_ends_with: String

  """All values not ending with the given string."""
  mobilePhone_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  client: ClientWhereInput
  offers_every: OfferWhereInput
  offers_some: OfferWhereInput
  offers_none: OfferWhereInput
}

input ClientContactWhereUniqueInput {
  id: ID
}

input ClientCreateInput {
  address: String
  email: String!
  name: String!
  phone: String!
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String!
  events: EventCreateManyInput
  offers: OfferCreateManyWithoutClientInput
  clientContacts: ClientContactCreateManyWithoutClientInput
  country: CountryCreateOneWithoutClientsInput
}

input ClientCreateManyWithoutCountryInput {
  create: [ClientCreateWithoutCountryInput!]
  connect: [ClientWhereUniqueInput!]
}

input ClientCreateOneWithoutClientContactsInput {
  create: ClientCreateWithoutClientContactsInput
  connect: ClientWhereUniqueInput
}

input ClientCreateOneWithoutOffersInput {
  create: ClientCreateWithoutOffersInput
  connect: ClientWhereUniqueInput
}

input ClientCreateWithoutClientContactsInput {
  address: String
  email: String!
  name: String!
  phone: String!
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String!
  events: EventCreateManyInput
  offers: OfferCreateManyWithoutClientInput
  country: CountryCreateOneWithoutClientsInput
}

input ClientCreateWithoutCountryInput {
  address: String
  email: String!
  name: String!
  phone: String!
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String!
  events: EventCreateManyInput
  offers: OfferCreateManyWithoutClientInput
  clientContacts: ClientContactCreateManyWithoutClientInput
}

input ClientCreateWithoutOffersInput {
  address: String
  email: String!
  name: String!
  phone: String!
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String!
  events: EventCreateManyInput
  clientContacts: ClientContactCreateManyWithoutClientInput
  country: CountryCreateOneWithoutClientsInput
}

"""An edge in a connection."""
type ClientEdge {
  """The item at the end of the edge."""
  node: Client!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClientOrderByInput {
  address_ASC
  address_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  tva_ASC
  tva_DESC
  language_ASC
  language_DESC
  type_ASC
  type_DESC
  postalCode_ASC
  postalCode_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClientPreviousValues {
  address: String
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  phone: String!
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String!
}

type ClientSubscriptionPayload {
  mutation: MutationType!
  node: Client
  updatedFields: [String!]
  previousValues: ClientPreviousValues
}

input ClientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClientWhereInput
}

enum ClientType {
  Prive
  Societe
}

input ClientUpdateInput {
  address: String
  email: String
  name: String
  phone: String
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String
  events: EventUpdateManyInput
  offers: OfferUpdateManyWithoutClientInput
  clientContacts: ClientContactUpdateManyWithoutClientInput
  country: CountryUpdateOneWithoutClientsInput
}

input ClientUpdateManyWithoutCountryInput {
  create: [ClientCreateWithoutCountryInput!]
  connect: [ClientWhereUniqueInput!]
  disconnect: [ClientWhereUniqueInput!]
  delete: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueWithoutCountryInput!]
  upsert: [ClientUpsertWithWhereUniqueWithoutCountryInput!]
}

input ClientUpdateOneWithoutClientContactsInput {
  create: ClientCreateWithoutClientContactsInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClientUpdateWithoutClientContactsDataInput
  upsert: ClientUpsertWithoutClientContactsInput
}

input ClientUpdateOneWithoutOffersInput {
  create: ClientCreateWithoutOffersInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClientUpdateWithoutOffersDataInput
  upsert: ClientUpsertWithoutOffersInput
}

input ClientUpdateWithoutClientContactsDataInput {
  address: String
  email: String
  name: String
  phone: String
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String
  events: EventUpdateManyInput
  offers: OfferUpdateManyWithoutClientInput
  country: CountryUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutCountryDataInput {
  address: String
  email: String
  name: String
  phone: String
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String
  events: EventUpdateManyInput
  offers: OfferUpdateManyWithoutClientInput
  clientContacts: ClientContactUpdateManyWithoutClientInput
}

input ClientUpdateWithoutOffersDataInput {
  address: String
  email: String
  name: String
  phone: String
  tva: String
  language: LanguageEnum
  type: ClientType
  postalCode: String
  events: EventUpdateManyInput
  clientContacts: ClientContactUpdateManyWithoutClientInput
  country: CountryUpdateOneWithoutClientsInput
}

input ClientUpdateWithWhereUniqueWithoutCountryInput {
  where: ClientWhereUniqueInput!
  data: ClientUpdateWithoutCountryDataInput!
}

input ClientUpsertWithoutClientContactsInput {
  update: ClientUpdateWithoutClientContactsDataInput!
  create: ClientCreateWithoutClientContactsInput!
}

input ClientUpsertWithoutOffersInput {
  update: ClientUpdateWithoutOffersDataInput!
  create: ClientCreateWithoutOffersInput!
}

input ClientUpsertWithWhereUniqueWithoutCountryInput {
  where: ClientWhereUniqueInput!
  update: ClientUpdateWithoutCountryDataInput!
  create: ClientCreateWithoutCountryInput!
}

input ClientWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientWhereInput!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  tva: String

  """All values that are not equal to given value."""
  tva_not: String

  """All values that are contained in given list."""
  tva_in: [String!]

  """All values that are not contained in given list."""
  tva_not_in: [String!]

  """All values less than the given value."""
  tva_lt: String

  """All values less than or equal the given value."""
  tva_lte: String

  """All values greater than the given value."""
  tva_gt: String

  """All values greater than or equal the given value."""
  tva_gte: String

  """All values containing the given string."""
  tva_contains: String

  """All values not containing the given string."""
  tva_not_contains: String

  """All values starting with the given string."""
  tva_starts_with: String

  """All values not starting with the given string."""
  tva_not_starts_with: String

  """All values ending with the given string."""
  tva_ends_with: String

  """All values not ending with the given string."""
  tva_not_ends_with: String
  language: LanguageEnum

  """All values that are not equal to given value."""
  language_not: LanguageEnum

  """All values that are contained in given list."""
  language_in: [LanguageEnum!]

  """All values that are not contained in given list."""
  language_not_in: [LanguageEnum!]
  type: ClientType

  """All values that are not equal to given value."""
  type_not: ClientType

  """All values that are contained in given list."""
  type_in: [ClientType!]

  """All values that are not contained in given list."""
  type_not_in: [ClientType!]
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  offers_every: OfferWhereInput
  offers_some: OfferWhereInput
  offers_none: OfferWhereInput
  clientContacts_every: ClientContactWhereInput
  clientContacts_some: ClientContactWhereInput
  clientContacts_none: ClientContactWhereInput
  country: CountryWhereInput
}

input ClientWhereUniqueInput {
  id: ID
}

type Communication implements Node {
  id: ID!
  message: String!
  subject: String!
  channel: Channel!
  date: DateTime!
  gmtOffset: String!
  offer(where: OfferWhereInput): Offer
}

"""A connection to a list of items."""
type CommunicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommunicationEdge]!
  aggregate: AggregateCommunication!
}

input CommunicationCreateInput {
  message: String!
  subject: String!
  channel: Channel!
  date: DateTime!
  gmtOffset: String!
  offer: OfferCreateOneWithoutCommunicationsInput
}

input CommunicationCreateManyWithoutOfferInput {
  create: [CommunicationCreateWithoutOfferInput!]
  connect: [CommunicationWhereUniqueInput!]
}

input CommunicationCreateWithoutOfferInput {
  message: String!
  subject: String!
  channel: Channel!
  date: DateTime!
  gmtOffset: String!
}

"""An edge in a connection."""
type CommunicationEdge {
  """The item at the end of the edge."""
  node: Communication!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommunicationOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  subject_ASC
  subject_DESC
  channel_ASC
  channel_DESC
  date_ASC
  date_DESC
  gmtOffset_ASC
  gmtOffset_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommunicationPreviousValues {
  id: ID!
  message: String!
  subject: String!
  channel: Channel!
  date: DateTime!
  gmtOffset: String!
}

type CommunicationSubscriptionPayload {
  mutation: MutationType!
  node: Communication
  updatedFields: [String!]
  previousValues: CommunicationPreviousValues
}

input CommunicationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommunicationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommunicationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommunicationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommunicationWhereInput
}

input CommunicationUpdateInput {
  message: String
  subject: String
  channel: Channel
  date: DateTime
  gmtOffset: String
  offer: OfferUpdateOneWithoutCommunicationsInput
}

input CommunicationUpdateManyWithoutOfferInput {
  create: [CommunicationCreateWithoutOfferInput!]
  connect: [CommunicationWhereUniqueInput!]
  disconnect: [CommunicationWhereUniqueInput!]
  delete: [CommunicationWhereUniqueInput!]
  update: [CommunicationUpdateWithWhereUniqueWithoutOfferInput!]
  upsert: [CommunicationUpsertWithWhereUniqueWithoutOfferInput!]
}

input CommunicationUpdateWithoutOfferDataInput {
  message: String
  subject: String
  channel: Channel
  date: DateTime
  gmtOffset: String
}

input CommunicationUpdateWithWhereUniqueWithoutOfferInput {
  where: CommunicationWhereUniqueInput!
  data: CommunicationUpdateWithoutOfferDataInput!
}

input CommunicationUpsertWithWhereUniqueWithoutOfferInput {
  where: CommunicationWhereUniqueInput!
  update: CommunicationUpdateWithoutOfferDataInput!
  create: CommunicationCreateWithoutOfferInput!
}

input CommunicationWhereInput {
  """Logical AND on all given filters."""
  AND: [CommunicationWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommunicationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommunicationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  channel: Channel

  """All values that are not equal to given value."""
  channel_not: Channel

  """All values that are contained in given list."""
  channel_in: [Channel!]

  """All values that are not contained in given list."""
  channel_not_in: [Channel!]
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  gmtOffset: String

  """All values that are not equal to given value."""
  gmtOffset_not: String

  """All values that are contained in given list."""
  gmtOffset_in: [String!]

  """All values that are not contained in given list."""
  gmtOffset_not_in: [String!]

  """All values less than the given value."""
  gmtOffset_lt: String

  """All values less than or equal the given value."""
  gmtOffset_lte: String

  """All values greater than the given value."""
  gmtOffset_gt: String

  """All values greater than or equal the given value."""
  gmtOffset_gte: String

  """All values containing the given string."""
  gmtOffset_contains: String

  """All values not containing the given string."""
  gmtOffset_not_contains: String

  """All values starting with the given string."""
  gmtOffset_starts_with: String

  """All values not starting with the given string."""
  gmtOffset_not_starts_with: String

  """All values ending with the given string."""
  gmtOffset_ends_with: String

  """All values not ending with the given string."""
  gmtOffset_not_ends_with: String
  offer: OfferWhereInput
}

input CommunicationWhereUniqueInput {
  id: ID
}

type Country implements Node {
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client!]
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type CountryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  name: String!
  clients: ClientCreateManyWithoutCountryInput
}

input CountryCreateOneWithoutClientsInput {
  create: CountryCreateWithoutClientsInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutClientsInput {
  name: String!
}

"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CountryPreviousValues {
  id: ID!
  name: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateInput {
  name: String
  clients: ClientUpdateManyWithoutCountryInput
}

input CountryUpdateOneWithoutClientsInput {
  create: CountryCreateWithoutClientsInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountryUpdateWithoutClientsDataInput
  upsert: CountryUpsertWithoutClientsInput
}

input CountryUpdateWithoutClientsDataInput {
  name: String
}

input CountryUpsertWithoutClientsInput {
  update: CountryUpdateWithoutClientsDataInput!
  create: CountryCreateWithoutClientsInput!
}

input CountryWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  clients_every: ClientWhereInput
  clients_some: ClientWhereInput
  clients_none: ClientWhereInput
}

input CountryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Employee implements Node {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  event(where: EventWhereInput): Event
  id: ID!
  job(where: JobWhereInput): Job
  startedAt: DateTime
  user(where: UserWhereInput): User
}

"""A connection to a list of items."""
type EmployeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  startedAt: DateTime
  event: EventCreateOneWithoutEmployeesInput
  job: JobCreateOneWithoutEmployeesInput
  user: UserCreateOneWithoutEmployeeInput
}

input EmployeeCreateManyWithoutEventInput {
  create: [EmployeeCreateWithoutEventInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateManyWithoutJobInput {
  create: [EmployeeCreateWithoutJobInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateOneWithoutUserInput {
  create: EmployeeCreateWithoutUserInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutEventInput {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  startedAt: DateTime
  job: JobCreateOneWithoutEmployeesInput
  user: UserCreateOneWithoutEmployeeInput
}

input EmployeeCreateWithoutJobInput {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  startedAt: DateTime
  event: EventCreateOneWithoutEmployeesInput
  user: UserCreateOneWithoutEmployeeInput
}

input EmployeeCreateWithoutUserInput {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  startedAt: DateTime
  event: EventCreateOneWithoutEmployeesInput
  job: JobCreateOneWithoutEmployeesInput
}

"""An edge in a connection."""
type EmployeeEdge {
  """The item at the end of the edge."""
  node: Employee!

  """A cursor for use in pagination."""
  cursor: String!
}

type EmployeeEstimation implements Node {
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  id: ID!
  job(where: JobWhereInput): Job
  number: Int!
  offer(where: OfferWhereInput): Offer
  pricePerHour: Float!
  total: Float!
}

"""A connection to a list of items."""
type EmployeeEstimationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeEstimationEdge]!
  aggregate: AggregateEmployeeEstimation!
}

input EmployeeEstimationCreateInput {
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  number: Int!
  pricePerHour: Float
  total: Float
  job: JobCreateOneWithoutEmployeeEstimationsInput
  offer: OfferCreateOneWithoutEmployeeEstimationsInput
}

input EmployeeEstimationCreateManyWithoutJobInput {
  create: [EmployeeEstimationCreateWithoutJobInput!]
  connect: [EmployeeEstimationWhereUniqueInput!]
}

input EmployeeEstimationCreateManyWithoutOfferInput {
  create: [EmployeeEstimationCreateWithoutOfferInput!]
  connect: [EmployeeEstimationWhereUniqueInput!]
}

input EmployeeEstimationCreateWithoutJobInput {
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  number: Int!
  pricePerHour: Float
  total: Float
  offer: OfferCreateOneWithoutEmployeeEstimationsInput
}

input EmployeeEstimationCreateWithoutOfferInput {
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  number: Int!
  pricePerHour: Float
  total: Float
  job: JobCreateOneWithoutEmployeeEstimationsInput
}

"""An edge in a connection."""
type EmployeeEstimationEdge {
  """The item at the end of the edge."""
  node: EmployeeEstimation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmployeeEstimationOrderByInput {
  estimatedEndAt_ASC
  estimatedEndAt_DESC
  estimatedStartAt_ASC
  estimatedStartAt_DESC
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  pricePerHour_ASC
  pricePerHour_DESC
  total_ASC
  total_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmployeeEstimationPreviousValues {
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  id: ID!
  number: Int!
  pricePerHour: Float!
  total: Float!
}

type EmployeeEstimationSubscriptionPayload {
  mutation: MutationType!
  node: EmployeeEstimation
  updatedFields: [String!]
  previousValues: EmployeeEstimationPreviousValues
}

input EmployeeEstimationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeEstimationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeEstimationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeEstimationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployeeEstimationWhereInput
}

input EmployeeEstimationUpdateInput {
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  number: Int
  pricePerHour: Float
  total: Float
  job: JobUpdateOneWithoutEmployeeEstimationsInput
  offer: OfferUpdateOneWithoutEmployeeEstimationsInput
}

input EmployeeEstimationUpdateManyWithoutJobInput {
  create: [EmployeeEstimationCreateWithoutJobInput!]
  connect: [EmployeeEstimationWhereUniqueInput!]
  disconnect: [EmployeeEstimationWhereUniqueInput!]
  delete: [EmployeeEstimationWhereUniqueInput!]
  update: [EmployeeEstimationUpdateWithWhereUniqueWithoutJobInput!]
  upsert: [EmployeeEstimationUpsertWithWhereUniqueWithoutJobInput!]
}

input EmployeeEstimationUpdateManyWithoutOfferInput {
  create: [EmployeeEstimationCreateWithoutOfferInput!]
  connect: [EmployeeEstimationWhereUniqueInput!]
  disconnect: [EmployeeEstimationWhereUniqueInput!]
  delete: [EmployeeEstimationWhereUniqueInput!]
  update: [EmployeeEstimationUpdateWithWhereUniqueWithoutOfferInput!]
  upsert: [EmployeeEstimationUpsertWithWhereUniqueWithoutOfferInput!]
}

input EmployeeEstimationUpdateWithoutJobDataInput {
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  number: Int
  pricePerHour: Float
  total: Float
  offer: OfferUpdateOneWithoutEmployeeEstimationsInput
}

input EmployeeEstimationUpdateWithoutOfferDataInput {
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  number: Int
  pricePerHour: Float
  total: Float
  job: JobUpdateOneWithoutEmployeeEstimationsInput
}

input EmployeeEstimationUpdateWithWhereUniqueWithoutJobInput {
  where: EmployeeEstimationWhereUniqueInput!
  data: EmployeeEstimationUpdateWithoutJobDataInput!
}

input EmployeeEstimationUpdateWithWhereUniqueWithoutOfferInput {
  where: EmployeeEstimationWhereUniqueInput!
  data: EmployeeEstimationUpdateWithoutOfferDataInput!
}

input EmployeeEstimationUpsertWithWhereUniqueWithoutJobInput {
  where: EmployeeEstimationWhereUniqueInput!
  update: EmployeeEstimationUpdateWithoutJobDataInput!
  create: EmployeeEstimationCreateWithoutJobInput!
}

input EmployeeEstimationUpsertWithWhereUniqueWithoutOfferInput {
  where: EmployeeEstimationWhereUniqueInput!
  update: EmployeeEstimationUpdateWithoutOfferDataInput!
  create: EmployeeEstimationCreateWithoutOfferInput!
}

input EmployeeEstimationWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeEstimationWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeEstimationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeEstimationWhereInput!]
  estimatedEndAt: DateTime

  """All values that are not equal to given value."""
  estimatedEndAt_not: DateTime

  """All values that are contained in given list."""
  estimatedEndAt_in: [DateTime!]

  """All values that are not contained in given list."""
  estimatedEndAt_not_in: [DateTime!]

  """All values less than the given value."""
  estimatedEndAt_lt: DateTime

  """All values less than or equal the given value."""
  estimatedEndAt_lte: DateTime

  """All values greater than the given value."""
  estimatedEndAt_gt: DateTime

  """All values greater than or equal the given value."""
  estimatedEndAt_gte: DateTime
  estimatedStartAt: DateTime

  """All values that are not equal to given value."""
  estimatedStartAt_not: DateTime

  """All values that are contained in given list."""
  estimatedStartAt_in: [DateTime!]

  """All values that are not contained in given list."""
  estimatedStartAt_not_in: [DateTime!]

  """All values less than the given value."""
  estimatedStartAt_lt: DateTime

  """All values less than or equal the given value."""
  estimatedStartAt_lte: DateTime

  """All values greater than the given value."""
  estimatedStartAt_gt: DateTime

  """All values greater than or equal the given value."""
  estimatedStartAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  pricePerHour: Float

  """All values that are not equal to given value."""
  pricePerHour_not: Float

  """All values that are contained in given list."""
  pricePerHour_in: [Float!]

  """All values that are not contained in given list."""
  pricePerHour_not_in: [Float!]

  """All values less than the given value."""
  pricePerHour_lt: Float

  """All values less than or equal the given value."""
  pricePerHour_lte: Float

  """All values greater than the given value."""
  pricePerHour_gt: Float

  """All values greater than or equal the given value."""
  pricePerHour_gte: Float
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  job: JobWhereInput
  offer: OfferWhereInput
}

input EmployeeEstimationWhereUniqueInput {
  id: ID
}

enum EmployeeOrderByInput {
  endedAt_ASC
  endedAt_DESC
  estimatedEndAt_ASC
  estimatedEndAt_DESC
  estimatedStartAt_ASC
  estimatedStartAt_DESC
  id_ASC
  id_DESC
  startedAt_ASC
  startedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmployeePreviousValues {
  endedAt: DateTime
  estimatedEndAt: DateTime!
  estimatedStartAt: DateTime!
  id: ID!
  startedAt: DateTime
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
}

input EmployeeUpdateInput {
  endedAt: DateTime
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  startedAt: DateTime
  event: EventUpdateOneWithoutEmployeesInput
  job: JobUpdateOneWithoutEmployeesInput
  user: UserUpdateOneWithoutEmployeeInput
}

input EmployeeUpdateManyWithoutEventInput {
  create: [EmployeeCreateWithoutEventInput!]
  connect: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  delete: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutEventInput!]
}

input EmployeeUpdateManyWithoutJobInput {
  create: [EmployeeCreateWithoutJobInput!]
  connect: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  delete: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutJobInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutJobInput!]
}

input EmployeeUpdateOneWithoutUserInput {
  create: EmployeeCreateWithoutUserInput
  connect: EmployeeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EmployeeUpdateWithoutUserDataInput
  upsert: EmployeeUpsertWithoutUserInput
}

input EmployeeUpdateWithoutEventDataInput {
  endedAt: DateTime
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  startedAt: DateTime
  job: JobUpdateOneWithoutEmployeesInput
  user: UserUpdateOneWithoutEmployeeInput
}

input EmployeeUpdateWithoutJobDataInput {
  endedAt: DateTime
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  startedAt: DateTime
  event: EventUpdateOneWithoutEmployeesInput
  user: UserUpdateOneWithoutEmployeeInput
}

input EmployeeUpdateWithoutUserDataInput {
  endedAt: DateTime
  estimatedEndAt: DateTime
  estimatedStartAt: DateTime
  startedAt: DateTime
  event: EventUpdateOneWithoutEmployeesInput
  job: JobUpdateOneWithoutEmployeesInput
}

input EmployeeUpdateWithWhereUniqueWithoutEventInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateWithoutEventDataInput!
}

input EmployeeUpdateWithWhereUniqueWithoutJobInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateWithoutJobDataInput!
}

input EmployeeUpsertWithoutUserInput {
  update: EmployeeUpdateWithoutUserDataInput!
  create: EmployeeCreateWithoutUserInput!
}

input EmployeeUpsertWithWhereUniqueWithoutEventInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateWithoutEventDataInput!
  create: EmployeeCreateWithoutEventInput!
}

input EmployeeUpsertWithWhereUniqueWithoutJobInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateWithoutJobDataInput!
  create: EmployeeCreateWithoutJobInput!
}

input EmployeeWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeWhereInput!]
  endedAt: DateTime

  """All values that are not equal to given value."""
  endedAt_not: DateTime

  """All values that are contained in given list."""
  endedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endedAt_not_in: [DateTime!]

  """All values less than the given value."""
  endedAt_lt: DateTime

  """All values less than or equal the given value."""
  endedAt_lte: DateTime

  """All values greater than the given value."""
  endedAt_gt: DateTime

  """All values greater than or equal the given value."""
  endedAt_gte: DateTime
  estimatedEndAt: DateTime

  """All values that are not equal to given value."""
  estimatedEndAt_not: DateTime

  """All values that are contained in given list."""
  estimatedEndAt_in: [DateTime!]

  """All values that are not contained in given list."""
  estimatedEndAt_not_in: [DateTime!]

  """All values less than the given value."""
  estimatedEndAt_lt: DateTime

  """All values less than or equal the given value."""
  estimatedEndAt_lte: DateTime

  """All values greater than the given value."""
  estimatedEndAt_gt: DateTime

  """All values greater than or equal the given value."""
  estimatedEndAt_gte: DateTime
  estimatedStartAt: DateTime

  """All values that are not equal to given value."""
  estimatedStartAt_not: DateTime

  """All values that are contained in given list."""
  estimatedStartAt_in: [DateTime!]

  """All values that are not contained in given list."""
  estimatedStartAt_not_in: [DateTime!]

  """All values less than the given value."""
  estimatedStartAt_lt: DateTime

  """All values less than or equal the given value."""
  estimatedStartAt_lte: DateTime

  """All values greater than the given value."""
  estimatedStartAt_gt: DateTime

  """All values greater than or equal the given value."""
  estimatedStartAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startedAt: DateTime

  """All values that are not equal to given value."""
  startedAt_not: DateTime

  """All values that are contained in given list."""
  startedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startedAt_not_in: [DateTime!]

  """All values less than the given value."""
  startedAt_lt: DateTime

  """All values less than or equal the given value."""
  startedAt_lte: DateTime

  """All values greater than the given value."""
  startedAt_gt: DateTime

  """All values greater than or equal the given value."""
  startedAt_gte: DateTime
  event: EventWhereInput
  job: JobWhereInput
  user: UserWhereInput
}

input EmployeeWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  offer(where: OfferWhereInput): Offer
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  eventStuffs(where: EventStuffWhereInput, orderBy: EventStuffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventStuff!]
  invoice(where: InvoiceWhereInput): Invoice
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle!]
  canceled: Boolean
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  canceled: Boolean
  offer: OfferCreateOneWithoutEventInput
  employees: EmployeeCreateManyWithoutEventInput
  eventStuffs: EventStuffCreateManyWithoutEventInput
  invoice: InvoiceCreateOneWithoutEventInput
  vehicles: VehicleCreateManyWithoutEventsInput
}

input EventCreateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutVehiclesInput {
  create: [EventCreateWithoutVehiclesInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneWithoutEmployeesInput {
  create: EventCreateWithoutEmployeesInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutEventStuffsInput {
  create: EventCreateWithoutEventStuffsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutInvoiceInput {
  create: EventCreateWithoutInvoiceInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutOfferInput {
  create: EventCreateWithoutOfferInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutEmployeesInput {
  canceled: Boolean
  offer: OfferCreateOneWithoutEventInput
  eventStuffs: EventStuffCreateManyWithoutEventInput
  invoice: InvoiceCreateOneWithoutEventInput
  vehicles: VehicleCreateManyWithoutEventsInput
}

input EventCreateWithoutEventStuffsInput {
  canceled: Boolean
  offer: OfferCreateOneWithoutEventInput
  employees: EmployeeCreateManyWithoutEventInput
  invoice: InvoiceCreateOneWithoutEventInput
  vehicles: VehicleCreateManyWithoutEventsInput
}

input EventCreateWithoutInvoiceInput {
  canceled: Boolean
  offer: OfferCreateOneWithoutEventInput
  employees: EmployeeCreateManyWithoutEventInput
  eventStuffs: EventStuffCreateManyWithoutEventInput
  vehicles: VehicleCreateManyWithoutEventsInput
}

input EventCreateWithoutOfferInput {
  canceled: Boolean
  employees: EmployeeCreateManyWithoutEventInput
  eventStuffs: EventStuffCreateManyWithoutEventInput
  invoice: InvoiceCreateOneWithoutEventInput
  vehicles: VehicleCreateManyWithoutEventsInput
}

input EventCreateWithoutVehiclesInput {
  canceled: Boolean
  offer: OfferCreateOneWithoutEventInput
  employees: EmployeeCreateManyWithoutEventInput
  eventStuffs: EventStuffCreateManyWithoutEventInput
  invoice: InvoiceCreateOneWithoutEventInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  canceled_ASC
  canceled_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  canceled: Boolean
}

type EventStuff implements Node {
  event(where: EventWhereInput): Event
  id: ID!
  quantity: Int!
  stuff(where: StuffWhereInput): Stuff
}

"""A connection to a list of items."""
type EventStuffConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventStuffEdge]!
  aggregate: AggregateEventStuff!
}

input EventStuffCreateInput {
  quantity: Int
  event: EventCreateOneWithoutEventStuffsInput
  stuff: StuffCreateOneWithoutEventStuffsInput
}

input EventStuffCreateManyWithoutEventInput {
  create: [EventStuffCreateWithoutEventInput!]
  connect: [EventStuffWhereUniqueInput!]
}

input EventStuffCreateManyWithoutStuffInput {
  create: [EventStuffCreateWithoutStuffInput!]
  connect: [EventStuffWhereUniqueInput!]
}

input EventStuffCreateWithoutEventInput {
  quantity: Int
  stuff: StuffCreateOneWithoutEventStuffsInput
}

input EventStuffCreateWithoutStuffInput {
  quantity: Int
  event: EventCreateOneWithoutEventStuffsInput
}

"""An edge in a connection."""
type EventStuffEdge {
  """The item at the end of the edge."""
  node: EventStuff!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventStuffOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventStuffPreviousValues {
  id: ID!
  quantity: Int!
}

type EventStuffSubscriptionPayload {
  mutation: MutationType!
  node: EventStuff
  updatedFields: [String!]
  previousValues: EventStuffPreviousValues
}

input EventStuffSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventStuffSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventStuffSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventStuffSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventStuffWhereInput
}

input EventStuffUpdateInput {
  quantity: Int
  event: EventUpdateOneWithoutEventStuffsInput
  stuff: StuffUpdateOneWithoutEventStuffsInput
}

input EventStuffUpdateManyWithoutEventInput {
  create: [EventStuffCreateWithoutEventInput!]
  connect: [EventStuffWhereUniqueInput!]
  disconnect: [EventStuffWhereUniqueInput!]
  delete: [EventStuffWhereUniqueInput!]
  update: [EventStuffUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [EventStuffUpsertWithWhereUniqueWithoutEventInput!]
}

input EventStuffUpdateManyWithoutStuffInput {
  create: [EventStuffCreateWithoutStuffInput!]
  connect: [EventStuffWhereUniqueInput!]
  disconnect: [EventStuffWhereUniqueInput!]
  delete: [EventStuffWhereUniqueInput!]
  update: [EventStuffUpdateWithWhereUniqueWithoutStuffInput!]
  upsert: [EventStuffUpsertWithWhereUniqueWithoutStuffInput!]
}

input EventStuffUpdateWithoutEventDataInput {
  quantity: Int
  stuff: StuffUpdateOneWithoutEventStuffsInput
}

input EventStuffUpdateWithoutStuffDataInput {
  quantity: Int
  event: EventUpdateOneWithoutEventStuffsInput
}

input EventStuffUpdateWithWhereUniqueWithoutEventInput {
  where: EventStuffWhereUniqueInput!
  data: EventStuffUpdateWithoutEventDataInput!
}

input EventStuffUpdateWithWhereUniqueWithoutStuffInput {
  where: EventStuffWhereUniqueInput!
  data: EventStuffUpdateWithoutStuffDataInput!
}

input EventStuffUpsertWithWhereUniqueWithoutEventInput {
  where: EventStuffWhereUniqueInput!
  update: EventStuffUpdateWithoutEventDataInput!
  create: EventStuffCreateWithoutEventInput!
}

input EventStuffUpsertWithWhereUniqueWithoutStuffInput {
  where: EventStuffWhereUniqueInput!
  update: EventStuffUpdateWithoutStuffDataInput!
  create: EventStuffCreateWithoutStuffInput!
}

input EventStuffWhereInput {
  """Logical AND on all given filters."""
  AND: [EventStuffWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventStuffWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventStuffWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  event: EventWhereInput
  stuff: StuffWhereInput
}

input EventStuffWhereUniqueInput {
  id: ID
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

type EventType implements Node {
  id: ID!
  name: String!
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer!]
}

"""A connection to a list of items."""
type EventTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventTypeEdge]!
  aggregate: AggregateEventType!
}

input EventTypeCreateInput {
  name: String!
  offers: OfferCreateManyWithoutEventTypeInput
}

input EventTypeCreateOneWithoutOffersInput {
  create: EventTypeCreateWithoutOffersInput
  connect: EventTypeWhereUniqueInput
}

input EventTypeCreateWithoutOffersInput {
  name: String!
}

"""An edge in a connection."""
type EventTypeEdge {
  """The item at the end of the edge."""
  node: EventType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventTypePreviousValues {
  id: ID!
  name: String!
}

type EventTypeSubscriptionPayload {
  mutation: MutationType!
  node: EventType
  updatedFields: [String!]
  previousValues: EventTypePreviousValues
}

input EventTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventTypeWhereInput
}

input EventTypeUpdateInput {
  name: String
  offers: OfferUpdateManyWithoutEventTypeInput
}

input EventTypeUpdateOneWithoutOffersInput {
  create: EventTypeCreateWithoutOffersInput
  connect: EventTypeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventTypeUpdateWithoutOffersDataInput
  upsert: EventTypeUpsertWithoutOffersInput
}

input EventTypeUpdateWithoutOffersDataInput {
  name: String
}

input EventTypeUpsertWithoutOffersInput {
  update: EventTypeUpdateWithoutOffersDataInput!
  create: EventTypeCreateWithoutOffersInput!
}

input EventTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [EventTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  offers_every: OfferWhereInput
  offers_some: OfferWhereInput
  offers_none: OfferWhereInput
}

input EventTypeWhereUniqueInput {
  id: ID
}

input EventUpdateDataInput {
  canceled: Boolean
  offer: OfferUpdateOneWithoutEventInput
  employees: EmployeeUpdateManyWithoutEventInput
  eventStuffs: EventStuffUpdateManyWithoutEventInput
  invoice: InvoiceUpdateOneWithoutEventInput
  vehicles: VehicleUpdateManyWithoutEventsInput
}

input EventUpdateInput {
  canceled: Boolean
  offer: OfferUpdateOneWithoutEventInput
  employees: EmployeeUpdateManyWithoutEventInput
  eventStuffs: EventStuffUpdateManyWithoutEventInput
  invoice: InvoiceUpdateOneWithoutEventInput
  vehicles: VehicleUpdateManyWithoutEventsInput
}

input EventUpdateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueNestedInput!]
  upsert: [EventUpsertWithWhereUniqueNestedInput!]
}

input EventUpdateManyWithoutVehiclesInput {
  create: [EventCreateWithoutVehiclesInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutVehiclesInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutVehiclesInput!]
}

input EventUpdateOneWithoutEmployeesInput {
  create: EventCreateWithoutEmployeesInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutEmployeesDataInput
  upsert: EventUpsertWithoutEmployeesInput
}

input EventUpdateOneWithoutEventStuffsInput {
  create: EventCreateWithoutEventStuffsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutEventStuffsDataInput
  upsert: EventUpsertWithoutEventStuffsInput
}

input EventUpdateOneWithoutInvoiceInput {
  create: EventCreateWithoutInvoiceInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutInvoiceDataInput
  upsert: EventUpsertWithoutInvoiceInput
}

input EventUpdateOneWithoutOfferInput {
  create: EventCreateWithoutOfferInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutOfferDataInput
  upsert: EventUpsertWithoutOfferInput
}

input EventUpdateWithoutEmployeesDataInput {
  canceled: Boolean
  offer: OfferUpdateOneWithoutEventInput
  eventStuffs: EventStuffUpdateManyWithoutEventInput
  invoice: InvoiceUpdateOneWithoutEventInput
  vehicles: VehicleUpdateManyWithoutEventsInput
}

input EventUpdateWithoutEventStuffsDataInput {
  canceled: Boolean
  offer: OfferUpdateOneWithoutEventInput
  employees: EmployeeUpdateManyWithoutEventInput
  invoice: InvoiceUpdateOneWithoutEventInput
  vehicles: VehicleUpdateManyWithoutEventsInput
}

input EventUpdateWithoutInvoiceDataInput {
  canceled: Boolean
  offer: OfferUpdateOneWithoutEventInput
  employees: EmployeeUpdateManyWithoutEventInput
  eventStuffs: EventStuffUpdateManyWithoutEventInput
  vehicles: VehicleUpdateManyWithoutEventsInput
}

input EventUpdateWithoutOfferDataInput {
  canceled: Boolean
  employees: EmployeeUpdateManyWithoutEventInput
  eventStuffs: EventStuffUpdateManyWithoutEventInput
  invoice: InvoiceUpdateOneWithoutEventInput
  vehicles: VehicleUpdateManyWithoutEventsInput
}

input EventUpdateWithoutVehiclesDataInput {
  canceled: Boolean
  offer: OfferUpdateOneWithoutEventInput
  employees: EmployeeUpdateManyWithoutEventInput
  eventStuffs: EventStuffUpdateManyWithoutEventInput
  invoice: InvoiceUpdateOneWithoutEventInput
}

input EventUpdateWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput!
  data: EventUpdateDataInput!
}

input EventUpdateWithWhereUniqueWithoutVehiclesInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutVehiclesDataInput!
}

input EventUpsertWithoutEmployeesInput {
  update: EventUpdateWithoutEmployeesDataInput!
  create: EventCreateWithoutEmployeesInput!
}

input EventUpsertWithoutEventStuffsInput {
  update: EventUpdateWithoutEventStuffsDataInput!
  create: EventCreateWithoutEventStuffsInput!
}

input EventUpsertWithoutInvoiceInput {
  update: EventUpdateWithoutInvoiceDataInput!
  create: EventCreateWithoutInvoiceInput!
}

input EventUpsertWithoutOfferInput {
  update: EventUpdateWithoutOfferDataInput!
  create: EventCreateWithoutOfferInput!
}

input EventUpsertWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput!
  update: EventUpdateDataInput!
  create: EventCreateInput!
}

input EventUpsertWithWhereUniqueWithoutVehiclesInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutVehiclesDataInput!
  create: EventCreateWithoutVehiclesInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  canceled: Boolean

  """All values that are not equal to given value."""
  canceled_not: Boolean
  offer: OfferWhereInput
  employees_every: EmployeeWhereInput
  employees_some: EmployeeWhereInput
  employees_none: EmployeeWhereInput
  eventStuffs_every: EventStuffWhereInput
  eventStuffs_some: EventStuffWhereInput
  eventStuffs_none: EventStuffWhereInput
  invoice: InvoiceWhereInput
  vehicles_every: VehicleWhereInput
  vehicles_some: VehicleWhereInput
  vehicles_none: VehicleWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Invoice implements Node {
  address: String
  budgets(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Budget!]
  date: DateTime
  event(where: EventWhereInput): Event
  id: ID!
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
}

"""A connection to a list of items."""
type InvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceEdge]!
  aggregate: AggregateInvoice!
}

input InvoiceCreateInput {
  address: String
  date: DateTime
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
  budgets: BudgetCreateManyWithoutInvoiceInput
  event: EventCreateOneWithoutInvoiceInput
}

input InvoiceCreateOneWithoutBudgetsInput {
  create: InvoiceCreateWithoutBudgetsInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateOneWithoutEventInput {
  create: InvoiceCreateWithoutEventInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateWithoutBudgetsInput {
  address: String
  date: DateTime
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
  event: EventCreateOneWithoutInvoiceInput
}

input InvoiceCreateWithoutEventInput {
  address: String
  date: DateTime
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
  budgets: BudgetCreateManyWithoutInvoiceInput
}

"""An edge in a connection."""
type InvoiceEdge {
  """The item at the end of the edge."""
  node: Invoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvoiceOrderByInput {
  address_ASC
  address_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  tva_ASC
  tva_DESC
  amountPayed_ASC
  amountPayed_DESC
  clientRef_ASC
  clientRef_DESC
  invoiceRef_ASC
  invoiceRef_DESC
  language_ASC
  language_DESC
  message_ASC
  message_DESC
  number_ASC
  number_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InvoicePreviousValues {
  address: String
  date: DateTime
  id: ID!
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
}

enum InvoiceStatus {
  PENDING
  SEND
  PAID
}

type InvoiceSubscriptionPayload {
  mutation: MutationType!
  node: Invoice
  updatedFields: [String!]
  previousValues: InvoicePreviousValues
}

input InvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceWhereInput
}

input InvoiceUpdateInput {
  address: String
  date: DateTime
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
  budgets: BudgetUpdateManyWithoutInvoiceInput
  event: EventUpdateOneWithoutInvoiceInput
}

input InvoiceUpdateOneWithoutBudgetsInput {
  create: InvoiceCreateWithoutBudgetsInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InvoiceUpdateWithoutBudgetsDataInput
  upsert: InvoiceUpsertWithoutBudgetsInput
}

input InvoiceUpdateOneWithoutEventInput {
  create: InvoiceCreateWithoutEventInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InvoiceUpdateWithoutEventDataInput
  upsert: InvoiceUpsertWithoutEventInput
}

input InvoiceUpdateWithoutBudgetsDataInput {
  address: String
  date: DateTime
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
  event: EventUpdateOneWithoutInvoiceInput
}

input InvoiceUpdateWithoutEventDataInput {
  address: String
  date: DateTime
  name: String
  tva: String
  amountPayed: Float
  clientRef: String
  invoiceRef: String
  language: LanguageEnum
  message: String
  number: Int
  status: InvoiceStatus
  type: Account
  budgets: BudgetUpdateManyWithoutInvoiceInput
}

input InvoiceUpsertWithoutBudgetsInput {
  update: InvoiceUpdateWithoutBudgetsDataInput!
  create: InvoiceCreateWithoutBudgetsInput!
}

input InvoiceUpsertWithoutEventInput {
  update: InvoiceUpdateWithoutEventDataInput!
  create: InvoiceCreateWithoutEventInput!
}

input InvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceWhereInput!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  tva: String

  """All values that are not equal to given value."""
  tva_not: String

  """All values that are contained in given list."""
  tva_in: [String!]

  """All values that are not contained in given list."""
  tva_not_in: [String!]

  """All values less than the given value."""
  tva_lt: String

  """All values less than or equal the given value."""
  tva_lte: String

  """All values greater than the given value."""
  tva_gt: String

  """All values greater than or equal the given value."""
  tva_gte: String

  """All values containing the given string."""
  tva_contains: String

  """All values not containing the given string."""
  tva_not_contains: String

  """All values starting with the given string."""
  tva_starts_with: String

  """All values not starting with the given string."""
  tva_not_starts_with: String

  """All values ending with the given string."""
  tva_ends_with: String

  """All values not ending with the given string."""
  tva_not_ends_with: String
  amountPayed: Float

  """All values that are not equal to given value."""
  amountPayed_not: Float

  """All values that are contained in given list."""
  amountPayed_in: [Float!]

  """All values that are not contained in given list."""
  amountPayed_not_in: [Float!]

  """All values less than the given value."""
  amountPayed_lt: Float

  """All values less than or equal the given value."""
  amountPayed_lte: Float

  """All values greater than the given value."""
  amountPayed_gt: Float

  """All values greater than or equal the given value."""
  amountPayed_gte: Float
  clientRef: String

  """All values that are not equal to given value."""
  clientRef_not: String

  """All values that are contained in given list."""
  clientRef_in: [String!]

  """All values that are not contained in given list."""
  clientRef_not_in: [String!]

  """All values less than the given value."""
  clientRef_lt: String

  """All values less than or equal the given value."""
  clientRef_lte: String

  """All values greater than the given value."""
  clientRef_gt: String

  """All values greater than or equal the given value."""
  clientRef_gte: String

  """All values containing the given string."""
  clientRef_contains: String

  """All values not containing the given string."""
  clientRef_not_contains: String

  """All values starting with the given string."""
  clientRef_starts_with: String

  """All values not starting with the given string."""
  clientRef_not_starts_with: String

  """All values ending with the given string."""
  clientRef_ends_with: String

  """All values not ending with the given string."""
  clientRef_not_ends_with: String
  invoiceRef: String

  """All values that are not equal to given value."""
  invoiceRef_not: String

  """All values that are contained in given list."""
  invoiceRef_in: [String!]

  """All values that are not contained in given list."""
  invoiceRef_not_in: [String!]

  """All values less than the given value."""
  invoiceRef_lt: String

  """All values less than or equal the given value."""
  invoiceRef_lte: String

  """All values greater than the given value."""
  invoiceRef_gt: String

  """All values greater than or equal the given value."""
  invoiceRef_gte: String

  """All values containing the given string."""
  invoiceRef_contains: String

  """All values not containing the given string."""
  invoiceRef_not_contains: String

  """All values starting with the given string."""
  invoiceRef_starts_with: String

  """All values not starting with the given string."""
  invoiceRef_not_starts_with: String

  """All values ending with the given string."""
  invoiceRef_ends_with: String

  """All values not ending with the given string."""
  invoiceRef_not_ends_with: String
  language: LanguageEnum

  """All values that are not equal to given value."""
  language_not: LanguageEnum

  """All values that are contained in given list."""
  language_in: [LanguageEnum!]

  """All values that are not contained in given list."""
  language_not_in: [LanguageEnum!]
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  status: InvoiceStatus

  """All values that are not equal to given value."""
  status_not: InvoiceStatus

  """All values that are contained in given list."""
  status_in: [InvoiceStatus!]

  """All values that are not contained in given list."""
  status_not_in: [InvoiceStatus!]
  type: Account

  """All values that are not equal to given value."""
  type_not: Account

  """All values that are contained in given list."""
  type_in: [Account!]

  """All values that are not contained in given list."""
  type_not_in: [Account!]
  budgets_every: BudgetWhereInput
  budgets_some: BudgetWhereInput
  budgets_none: BudgetWhereInput
  event: EventWhereInput
}

input InvoiceWhereUniqueInput {
  id: ID
}

type Item implements Node {
  id: ID!
  itemTranslations(where: ItemTranslationWhereInput, orderBy: ItemTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemTranslation!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  itemProposalFlags(where: ItemProposalFlagWhereInput, orderBy: ItemProposalFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemProposalFlag!]
  itemProposals(where: ItemProposalWhereInput, orderBy: ItemProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemProposal!]
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  itemTranslations: ItemTranslationCreateManyWithoutItemsInput
  categories: CategoryCreateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemInput
  itemProposals: ItemProposalCreateManyWithoutItemsInput
}

input ItemCreateManyWithoutCategoriesInput {
  create: [ItemCreateWithoutCategoriesInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateManyWithoutItemProposalsInput {
  create: [ItemCreateWithoutItemProposalsInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateOneWithoutItemProposalFlagsInput {
  create: ItemCreateWithoutItemProposalFlagsInput
  connect: ItemWhereUniqueInput
}

input ItemCreateOneWithoutItemTranslationsInput {
  create: ItemCreateWithoutItemTranslationsInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutCategoriesInput {
  itemTranslations: ItemTranslationCreateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemInput
  itemProposals: ItemProposalCreateManyWithoutItemsInput
}

input ItemCreateWithoutItemProposalFlagsInput {
  itemTranslations: ItemTranslationCreateManyWithoutItemsInput
  categories: CategoryCreateManyWithoutItemsInput
  itemProposals: ItemProposalCreateManyWithoutItemsInput
}

input ItemCreateWithoutItemProposalsInput {
  itemTranslations: ItemTranslationCreateManyWithoutItemsInput
  categories: CategoryCreateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemInput
}

input ItemCreateWithoutItemTranslationsInput {
  categories: CategoryCreateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemInput
  itemProposals: ItemProposalCreateManyWithoutItemsInput
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemPreviousValues {
  id: ID!
}

type ItemProposal implements Node {
  id: ID!
  itemProposalFlags(where: ItemProposalFlagWhereInput, orderBy: ItemProposalFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemProposalFlag!]
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  section(where: SectionWhereInput): Section
  status: ItemProposalStatus!
}

"""A connection to a list of items."""
type ItemProposalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemProposalEdge]!
  aggregate: AggregateItemProposal!
}

input ItemProposalCreateInput {
  status: ItemProposalStatus!
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemProposalInput
  items: ItemCreateManyWithoutItemProposalsInput
  section: SectionCreateOneWithoutItemProposalsInput
}

input ItemProposalCreateManyWithoutItemsInput {
  create: [ItemProposalCreateWithoutItemsInput!]
  connect: [ItemProposalWhereUniqueInput!]
}

input ItemProposalCreateManyWithoutSectionInput {
  create: [ItemProposalCreateWithoutSectionInput!]
  connect: [ItemProposalWhereUniqueInput!]
}

input ItemProposalCreateOneWithoutItemProposalFlagsInput {
  create: ItemProposalCreateWithoutItemProposalFlagsInput
  connect: ItemProposalWhereUniqueInput
}

input ItemProposalCreateWithoutItemProposalFlagsInput {
  status: ItemProposalStatus!
  items: ItemCreateManyWithoutItemProposalsInput
  section: SectionCreateOneWithoutItemProposalsInput
}

input ItemProposalCreateWithoutItemsInput {
  status: ItemProposalStatus!
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemProposalInput
  section: SectionCreateOneWithoutItemProposalsInput
}

input ItemProposalCreateWithoutSectionInput {
  status: ItemProposalStatus!
  itemProposalFlags: ItemProposalFlagCreateManyWithoutItemProposalInput
  items: ItemCreateManyWithoutItemProposalsInput
}

"""An edge in a connection."""
type ItemProposalEdge {
  """The item at the end of the edge."""
  node: ItemProposal!

  """A cursor for use in pagination."""
  cursor: String!
}

type ItemProposalFlag implements Node {
  id: ID!
  itemProposal(where: ItemProposalWhereInput): ItemProposal
  item(where: ItemWhereInput): Item
  showDescription: Boolean!
}

"""A connection to a list of items."""
type ItemProposalFlagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemProposalFlagEdge]!
  aggregate: AggregateItemProposalFlag!
}

input ItemProposalFlagCreateInput {
  showDescription: Boolean
  itemProposal: ItemProposalCreateOneWithoutItemProposalFlagsInput
  item: ItemCreateOneWithoutItemProposalFlagsInput
}

input ItemProposalFlagCreateManyWithoutItemInput {
  create: [ItemProposalFlagCreateWithoutItemInput!]
  connect: [ItemProposalFlagWhereUniqueInput!]
}

input ItemProposalFlagCreateManyWithoutItemProposalInput {
  create: [ItemProposalFlagCreateWithoutItemProposalInput!]
  connect: [ItemProposalFlagWhereUniqueInput!]
}

input ItemProposalFlagCreateWithoutItemInput {
  showDescription: Boolean
  itemProposal: ItemProposalCreateOneWithoutItemProposalFlagsInput
}

input ItemProposalFlagCreateWithoutItemProposalInput {
  showDescription: Boolean
  item: ItemCreateOneWithoutItemProposalFlagsInput
}

"""An edge in a connection."""
type ItemProposalFlagEdge {
  """The item at the end of the edge."""
  node: ItemProposalFlag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemProposalFlagOrderByInput {
  id_ASC
  id_DESC
  showDescription_ASC
  showDescription_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemProposalFlagPreviousValues {
  id: ID!
  showDescription: Boolean!
}

type ItemProposalFlagSubscriptionPayload {
  mutation: MutationType!
  node: ItemProposalFlag
  updatedFields: [String!]
  previousValues: ItemProposalFlagPreviousValues
}

input ItemProposalFlagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemProposalFlagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemProposalFlagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemProposalFlagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemProposalFlagWhereInput
}

input ItemProposalFlagUpdateInput {
  showDescription: Boolean
  itemProposal: ItemProposalUpdateOneWithoutItemProposalFlagsInput
  item: ItemUpdateOneWithoutItemProposalFlagsInput
}

input ItemProposalFlagUpdateManyWithoutItemInput {
  create: [ItemProposalFlagCreateWithoutItemInput!]
  connect: [ItemProposalFlagWhereUniqueInput!]
  disconnect: [ItemProposalFlagWhereUniqueInput!]
  delete: [ItemProposalFlagWhereUniqueInput!]
  update: [ItemProposalFlagUpdateWithWhereUniqueWithoutItemInput!]
  upsert: [ItemProposalFlagUpsertWithWhereUniqueWithoutItemInput!]
}

input ItemProposalFlagUpdateManyWithoutItemProposalInput {
  create: [ItemProposalFlagCreateWithoutItemProposalInput!]
  connect: [ItemProposalFlagWhereUniqueInput!]
  disconnect: [ItemProposalFlagWhereUniqueInput!]
  delete: [ItemProposalFlagWhereUniqueInput!]
  update: [ItemProposalFlagUpdateWithWhereUniqueWithoutItemProposalInput!]
  upsert: [ItemProposalFlagUpsertWithWhereUniqueWithoutItemProposalInput!]
}

input ItemProposalFlagUpdateWithoutItemDataInput {
  showDescription: Boolean
  itemProposal: ItemProposalUpdateOneWithoutItemProposalFlagsInput
}

input ItemProposalFlagUpdateWithoutItemProposalDataInput {
  showDescription: Boolean
  item: ItemUpdateOneWithoutItemProposalFlagsInput
}

input ItemProposalFlagUpdateWithWhereUniqueWithoutItemInput {
  where: ItemProposalFlagWhereUniqueInput!
  data: ItemProposalFlagUpdateWithoutItemDataInput!
}

input ItemProposalFlagUpdateWithWhereUniqueWithoutItemProposalInput {
  where: ItemProposalFlagWhereUniqueInput!
  data: ItemProposalFlagUpdateWithoutItemProposalDataInput!
}

input ItemProposalFlagUpsertWithWhereUniqueWithoutItemInput {
  where: ItemProposalFlagWhereUniqueInput!
  update: ItemProposalFlagUpdateWithoutItemDataInput!
  create: ItemProposalFlagCreateWithoutItemInput!
}

input ItemProposalFlagUpsertWithWhereUniqueWithoutItemProposalInput {
  where: ItemProposalFlagWhereUniqueInput!
  update: ItemProposalFlagUpdateWithoutItemProposalDataInput!
  create: ItemProposalFlagCreateWithoutItemProposalInput!
}

input ItemProposalFlagWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemProposalFlagWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemProposalFlagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemProposalFlagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  showDescription: Boolean

  """All values that are not equal to given value."""
  showDescription_not: Boolean
  itemProposal: ItemProposalWhereInput
  item: ItemWhereInput
}

input ItemProposalFlagWhereUniqueInput {
  id: ID
}

enum ItemProposalOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemProposalPreviousValues {
  id: ID!
  status: ItemProposalStatus!
}

enum ItemProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type ItemProposalSubscriptionPayload {
  mutation: MutationType!
  node: ItemProposal
  updatedFields: [String!]
  previousValues: ItemProposalPreviousValues
}

input ItemProposalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemProposalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemProposalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemProposalSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemProposalWhereInput
}

input ItemProposalUpdateInput {
  status: ItemProposalStatus
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemProposalInput
  items: ItemUpdateManyWithoutItemProposalsInput
  section: SectionUpdateOneWithoutItemProposalsInput
}

input ItemProposalUpdateManyWithoutItemsInput {
  create: [ItemProposalCreateWithoutItemsInput!]
  connect: [ItemProposalWhereUniqueInput!]
  disconnect: [ItemProposalWhereUniqueInput!]
  delete: [ItemProposalWhereUniqueInput!]
  update: [ItemProposalUpdateWithWhereUniqueWithoutItemsInput!]
  upsert: [ItemProposalUpsertWithWhereUniqueWithoutItemsInput!]
}

input ItemProposalUpdateManyWithoutSectionInput {
  create: [ItemProposalCreateWithoutSectionInput!]
  connect: [ItemProposalWhereUniqueInput!]
  disconnect: [ItemProposalWhereUniqueInput!]
  delete: [ItemProposalWhereUniqueInput!]
  update: [ItemProposalUpdateWithWhereUniqueWithoutSectionInput!]
  upsert: [ItemProposalUpsertWithWhereUniqueWithoutSectionInput!]
}

input ItemProposalUpdateOneWithoutItemProposalFlagsInput {
  create: ItemProposalCreateWithoutItemProposalFlagsInput
  connect: ItemProposalWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ItemProposalUpdateWithoutItemProposalFlagsDataInput
  upsert: ItemProposalUpsertWithoutItemProposalFlagsInput
}

input ItemProposalUpdateWithoutItemProposalFlagsDataInput {
  status: ItemProposalStatus
  items: ItemUpdateManyWithoutItemProposalsInput
  section: SectionUpdateOneWithoutItemProposalsInput
}

input ItemProposalUpdateWithoutItemsDataInput {
  status: ItemProposalStatus
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemProposalInput
  section: SectionUpdateOneWithoutItemProposalsInput
}

input ItemProposalUpdateWithoutSectionDataInput {
  status: ItemProposalStatus
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemProposalInput
  items: ItemUpdateManyWithoutItemProposalsInput
}

input ItemProposalUpdateWithWhereUniqueWithoutItemsInput {
  where: ItemProposalWhereUniqueInput!
  data: ItemProposalUpdateWithoutItemsDataInput!
}

input ItemProposalUpdateWithWhereUniqueWithoutSectionInput {
  where: ItemProposalWhereUniqueInput!
  data: ItemProposalUpdateWithoutSectionDataInput!
}

input ItemProposalUpsertWithoutItemProposalFlagsInput {
  update: ItemProposalUpdateWithoutItemProposalFlagsDataInput!
  create: ItemProposalCreateWithoutItemProposalFlagsInput!
}

input ItemProposalUpsertWithWhereUniqueWithoutItemsInput {
  where: ItemProposalWhereUniqueInput!
  update: ItemProposalUpdateWithoutItemsDataInput!
  create: ItemProposalCreateWithoutItemsInput!
}

input ItemProposalUpsertWithWhereUniqueWithoutSectionInput {
  where: ItemProposalWhereUniqueInput!
  update: ItemProposalUpdateWithoutSectionDataInput!
  create: ItemProposalCreateWithoutSectionInput!
}

input ItemProposalWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemProposalWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemProposalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemProposalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: ItemProposalStatus

  """All values that are not equal to given value."""
  status_not: ItemProposalStatus

  """All values that are contained in given list."""
  status_in: [ItemProposalStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ItemProposalStatus!]
  itemProposalFlags_every: ItemProposalFlagWhereInput
  itemProposalFlags_some: ItemProposalFlagWhereInput
  itemProposalFlags_none: ItemProposalFlagWhereInput
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  section: SectionWhereInput
}

input ItemProposalWhereUniqueInput {
  id: ID
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

type ItemTranslation implements Node {
  description: String
  id: ID!
  items(where: ItemWhereInput): Item
  internalDescription: String
  language: LanguageEnum!
  name: String
}

"""A connection to a list of items."""
type ItemTranslationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemTranslationEdge]!
  aggregate: AggregateItemTranslation!
}

input ItemTranslationCreateInput {
  description: String
  internalDescription: String
  language: LanguageEnum!
  name: String
  items: ItemCreateOneWithoutItemTranslationsInput
}

input ItemTranslationCreateManyWithoutItemsInput {
  create: [ItemTranslationCreateWithoutItemsInput!]
  connect: [ItemTranslationWhereUniqueInput!]
}

input ItemTranslationCreateWithoutItemsInput {
  description: String
  internalDescription: String
  language: LanguageEnum!
  name: String
}

"""An edge in a connection."""
type ItemTranslationEdge {
  """The item at the end of the edge."""
  node: ItemTranslation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemTranslationOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  internalDescription_ASC
  internalDescription_DESC
  language_ASC
  language_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemTranslationPreviousValues {
  description: String
  id: ID!
  internalDescription: String
  language: LanguageEnum!
  name: String
}

type ItemTranslationSubscriptionPayload {
  mutation: MutationType!
  node: ItemTranslation
  updatedFields: [String!]
  previousValues: ItemTranslationPreviousValues
}

input ItemTranslationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemTranslationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemTranslationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemTranslationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemTranslationWhereInput
}

input ItemTranslationUpdateInput {
  description: String
  internalDescription: String
  language: LanguageEnum
  name: String
  items: ItemUpdateOneWithoutItemTranslationsInput
}

input ItemTranslationUpdateManyWithoutItemsInput {
  create: [ItemTranslationCreateWithoutItemsInput!]
  connect: [ItemTranslationWhereUniqueInput!]
  disconnect: [ItemTranslationWhereUniqueInput!]
  delete: [ItemTranslationWhereUniqueInput!]
  update: [ItemTranslationUpdateWithWhereUniqueWithoutItemsInput!]
  upsert: [ItemTranslationUpsertWithWhereUniqueWithoutItemsInput!]
}

input ItemTranslationUpdateWithoutItemsDataInput {
  description: String
  internalDescription: String
  language: LanguageEnum
  name: String
}

input ItemTranslationUpdateWithWhereUniqueWithoutItemsInput {
  where: ItemTranslationWhereUniqueInput!
  data: ItemTranslationUpdateWithoutItemsDataInput!
}

input ItemTranslationUpsertWithWhereUniqueWithoutItemsInput {
  where: ItemTranslationWhereUniqueInput!
  update: ItemTranslationUpdateWithoutItemsDataInput!
  create: ItemTranslationCreateWithoutItemsInput!
}

input ItemTranslationWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemTranslationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemTranslationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemTranslationWhereInput!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  internalDescription: String

  """All values that are not equal to given value."""
  internalDescription_not: String

  """All values that are contained in given list."""
  internalDescription_in: [String!]

  """All values that are not contained in given list."""
  internalDescription_not_in: [String!]

  """All values less than the given value."""
  internalDescription_lt: String

  """All values less than or equal the given value."""
  internalDescription_lte: String

  """All values greater than the given value."""
  internalDescription_gt: String

  """All values greater than or equal the given value."""
  internalDescription_gte: String

  """All values containing the given string."""
  internalDescription_contains: String

  """All values not containing the given string."""
  internalDescription_not_contains: String

  """All values starting with the given string."""
  internalDescription_starts_with: String

  """All values not starting with the given string."""
  internalDescription_not_starts_with: String

  """All values ending with the given string."""
  internalDescription_ends_with: String

  """All values not ending with the given string."""
  internalDescription_not_ends_with: String
  language: LanguageEnum

  """All values that are not equal to given value."""
  language_not: LanguageEnum

  """All values that are contained in given list."""
  language_in: [LanguageEnum!]

  """All values that are not contained in given list."""
  language_not_in: [LanguageEnum!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  items: ItemWhereInput
}

input ItemTranslationWhereUniqueInput {
  id: ID
}

input ItemUpdateInput {
  itemTranslations: ItemTranslationUpdateManyWithoutItemsInput
  categories: CategoryUpdateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemInput
  itemProposals: ItemProposalUpdateManyWithoutItemsInput
}

input ItemUpdateManyWithoutCategoriesInput {
  create: [ItemCreateWithoutCategoriesInput!]
  connect: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ItemUpdateManyWithoutItemProposalsInput {
  create: [ItemCreateWithoutItemProposalsInput!]
  connect: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutItemProposalsInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutItemProposalsInput!]
}

input ItemUpdateOneWithoutItemProposalFlagsInput {
  create: ItemCreateWithoutItemProposalFlagsInput
  connect: ItemWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ItemUpdateWithoutItemProposalFlagsDataInput
  upsert: ItemUpsertWithoutItemProposalFlagsInput
}

input ItemUpdateOneWithoutItemTranslationsInput {
  create: ItemCreateWithoutItemTranslationsInput
  connect: ItemWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ItemUpdateWithoutItemTranslationsDataInput
  upsert: ItemUpsertWithoutItemTranslationsInput
}

input ItemUpdateWithoutCategoriesDataInput {
  itemTranslations: ItemTranslationUpdateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemInput
  itemProposals: ItemProposalUpdateManyWithoutItemsInput
}

input ItemUpdateWithoutItemProposalFlagsDataInput {
  itemTranslations: ItemTranslationUpdateManyWithoutItemsInput
  categories: CategoryUpdateManyWithoutItemsInput
  itemProposals: ItemProposalUpdateManyWithoutItemsInput
}

input ItemUpdateWithoutItemProposalsDataInput {
  itemTranslations: ItemTranslationUpdateManyWithoutItemsInput
  categories: CategoryUpdateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemInput
}

input ItemUpdateWithoutItemTranslationsDataInput {
  categories: CategoryUpdateManyWithoutItemsInput
  itemProposalFlags: ItemProposalFlagUpdateManyWithoutItemInput
  itemProposals: ItemProposalUpdateManyWithoutItemsInput
}

input ItemUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutCategoriesDataInput!
}

input ItemUpdateWithWhereUniqueWithoutItemProposalsInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutItemProposalsDataInput!
}

input ItemUpsertWithoutItemProposalFlagsInput {
  update: ItemUpdateWithoutItemProposalFlagsDataInput!
  create: ItemCreateWithoutItemProposalFlagsInput!
}

input ItemUpsertWithoutItemTranslationsInput {
  update: ItemUpdateWithoutItemTranslationsDataInput!
  create: ItemCreateWithoutItemTranslationsInput!
}

input ItemUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutCategoriesDataInput!
  create: ItemCreateWithoutCategoriesInput!
}

input ItemUpsertWithWhereUniqueWithoutItemProposalsInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutItemProposalsDataInput!
  create: ItemCreateWithoutItemProposalsInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  itemTranslations_every: ItemTranslationWhereInput
  itemTranslations_some: ItemTranslationWhereInput
  itemTranslations_none: ItemTranslationWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  itemProposalFlags_every: ItemProposalFlagWhereInput
  itemProposalFlags_some: ItemProposalFlagWhereInput
  itemProposalFlags_none: ItemProposalFlagWhereInput
  itemProposals_every: ItemProposalWhereInput
  itemProposals_some: ItemProposalWhereInput
  itemProposals_none: ItemProposalWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

type Job implements Node {
  employeeEstimations(where: EmployeeEstimationWhereInput, orderBy: EmployeeEstimationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeeEstimation!]
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type JobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  name: String!
  employeeEstimations: EmployeeEstimationCreateManyWithoutJobInput
  employees: EmployeeCreateManyWithoutJobInput
  users: UserCreateManyWithoutJobsInput
}

input JobCreateManyWithoutUsersInput {
  create: [JobCreateWithoutUsersInput!]
  connect: [JobWhereUniqueInput!]
}

input JobCreateOneWithoutEmployeeEstimationsInput {
  create: JobCreateWithoutEmployeeEstimationsInput
  connect: JobWhereUniqueInput
}

input JobCreateOneWithoutEmployeesInput {
  create: JobCreateWithoutEmployeesInput
  connect: JobWhereUniqueInput
}

input JobCreateWithoutEmployeeEstimationsInput {
  name: String!
  employees: EmployeeCreateManyWithoutJobInput
  users: UserCreateManyWithoutJobsInput
}

input JobCreateWithoutEmployeesInput {
  name: String!
  employeeEstimations: EmployeeEstimationCreateManyWithoutJobInput
  users: UserCreateManyWithoutJobsInput
}

input JobCreateWithoutUsersInput {
  name: String!
  employeeEstimations: EmployeeEstimationCreateManyWithoutJobInput
  employees: EmployeeCreateManyWithoutJobInput
}

"""An edge in a connection."""
type JobEdge {
  """The item at the end of the edge."""
  node: Job!

  """A cursor for use in pagination."""
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type JobPreviousValues {
  id: ID!
  name: String!
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [JobSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [JobSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JobSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: JobWhereInput
}

input JobUpdateInput {
  name: String
  employeeEstimations: EmployeeEstimationUpdateManyWithoutJobInput
  employees: EmployeeUpdateManyWithoutJobInput
  users: UserUpdateManyWithoutJobsInput
}

input JobUpdateManyWithoutUsersInput {
  create: [JobCreateWithoutUsersInput!]
  connect: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutUsersInput!]
}

input JobUpdateOneWithoutEmployeeEstimationsInput {
  create: JobCreateWithoutEmployeeEstimationsInput
  connect: JobWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: JobUpdateWithoutEmployeeEstimationsDataInput
  upsert: JobUpsertWithoutEmployeeEstimationsInput
}

input JobUpdateOneWithoutEmployeesInput {
  create: JobCreateWithoutEmployeesInput
  connect: JobWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: JobUpdateWithoutEmployeesDataInput
  upsert: JobUpsertWithoutEmployeesInput
}

input JobUpdateWithoutEmployeeEstimationsDataInput {
  name: String
  employees: EmployeeUpdateManyWithoutJobInput
  users: UserUpdateManyWithoutJobsInput
}

input JobUpdateWithoutEmployeesDataInput {
  name: String
  employeeEstimations: EmployeeEstimationUpdateManyWithoutJobInput
  users: UserUpdateManyWithoutJobsInput
}

input JobUpdateWithoutUsersDataInput {
  name: String
  employeeEstimations: EmployeeEstimationUpdateManyWithoutJobInput
  employees: EmployeeUpdateManyWithoutJobInput
}

input JobUpdateWithWhereUniqueWithoutUsersInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutUsersDataInput!
}

input JobUpsertWithoutEmployeeEstimationsInput {
  update: JobUpdateWithoutEmployeeEstimationsDataInput!
  create: JobCreateWithoutEmployeeEstimationsInput!
}

input JobUpsertWithoutEmployeesInput {
  update: JobUpdateWithoutEmployeesDataInput!
  create: JobCreateWithoutEmployeesInput!
}

input JobUpsertWithWhereUniqueWithoutUsersInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutUsersDataInput!
  create: JobCreateWithoutUsersInput!
}

input JobWhereInput {
  """Logical AND on all given filters."""
  AND: [JobWhereInput!]

  """Logical OR on all given filters."""
  OR: [JobWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JobWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  employeeEstimations_every: EmployeeEstimationWhereInput
  employeeEstimations_some: EmployeeEstimationWhereInput
  employeeEstimations_none: EmployeeEstimationWhereInput
  employees_every: EmployeeWhereInput
  employees_some: EmployeeWhereInput
  employees_none: EmployeeWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input JobWhereUniqueInput {
  id: ID
}

enum LanguageEnum {
  FR
  NL
  EN
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Menu implements Node {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  id: ID!
  kitchenNotes: String
  name: String!
  offer(where: OfferWhereInput): Offer
  people: Int
  price: Float
  sectionItem(where: SectionItemWhereInput): SectionItem
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section!]
  startDate: DateTime
}

"""A connection to a list of items."""
type MenuConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MenuEdge]!
  aggregate: AggregateMenu!
}

input MenuCreateInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String!
  people: Int
  price: Float
  startDate: DateTime
  offer: OfferCreateOneWithoutMenusInput
  sectionItem: SectionItemCreateOneWithoutMenuInput
  sections: SectionCreateManyWithoutMenuInput
}

input MenuCreateManyWithoutOfferInput {
  create: [MenuCreateWithoutOfferInput!]
  connect: [MenuWhereUniqueInput!]
}

input MenuCreateOneWithoutSectionItemInput {
  create: MenuCreateWithoutSectionItemInput
  connect: MenuWhereUniqueInput
}

input MenuCreateOneWithoutSectionsInput {
  create: MenuCreateWithoutSectionsInput
  connect: MenuWhereUniqueInput
}

input MenuCreateWithoutOfferInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String!
  people: Int
  price: Float
  startDate: DateTime
  sectionItem: SectionItemCreateOneWithoutMenuInput
  sections: SectionCreateManyWithoutMenuInput
}

input MenuCreateWithoutSectionItemInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String!
  people: Int
  price: Float
  startDate: DateTime
  offer: OfferCreateOneWithoutMenusInput
  sections: SectionCreateManyWithoutMenuInput
}

input MenuCreateWithoutSectionsInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String!
  people: Int
  price: Float
  startDate: DateTime
  offer: OfferCreateOneWithoutMenusInput
  sectionItem: SectionItemCreateOneWithoutMenuInput
}

"""An edge in a connection."""
type MenuEdge {
  """The item at the end of the edge."""
  node: Menu!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MenuOrderByInput {
  comment_ASC
  comment_DESC
  endDate_ASC
  endDate_DESC
  hasItemsCold_ASC
  hasItemsCold_DESC
  hasItemsDessert_ASC
  hasItemsDessert_DESC
  hasItemsHot_ASC
  hasItemsHot_DESC
  hasItemsZCold_ASC
  hasItemsZCold_DESC
  hasItemsZHot_ASC
  hasItemsZHot_DESC
  id_ASC
  id_DESC
  kitchenNotes_ASC
  kitchenNotes_DESC
  name_ASC
  name_DESC
  people_ASC
  people_DESC
  price_ASC
  price_DESC
  startDate_ASC
  startDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MenuPreviousValues {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  id: ID!
  kitchenNotes: String
  name: String!
  people: Int
  price: Float
  startDate: DateTime
}

type MenuSubscriptionPayload {
  mutation: MutationType!
  node: Menu
  updatedFields: [String!]
  previousValues: MenuPreviousValues
}

input MenuSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MenuWhereInput
}

input MenuUpdateInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String
  people: Int
  price: Float
  startDate: DateTime
  offer: OfferUpdateOneWithoutMenusInput
  sectionItem: SectionItemUpdateOneWithoutMenuInput
  sections: SectionUpdateManyWithoutMenuInput
}

input MenuUpdateManyWithoutOfferInput {
  create: [MenuCreateWithoutOfferInput!]
  connect: [MenuWhereUniqueInput!]
  disconnect: [MenuWhereUniqueInput!]
  delete: [MenuWhereUniqueInput!]
  update: [MenuUpdateWithWhereUniqueWithoutOfferInput!]
  upsert: [MenuUpsertWithWhereUniqueWithoutOfferInput!]
}

input MenuUpdateOneWithoutSectionItemInput {
  create: MenuCreateWithoutSectionItemInput
  connect: MenuWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MenuUpdateWithoutSectionItemDataInput
  upsert: MenuUpsertWithoutSectionItemInput
}

input MenuUpdateOneWithoutSectionsInput {
  create: MenuCreateWithoutSectionsInput
  connect: MenuWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MenuUpdateWithoutSectionsDataInput
  upsert: MenuUpsertWithoutSectionsInput
}

input MenuUpdateWithoutOfferDataInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String
  people: Int
  price: Float
  startDate: DateTime
  sectionItem: SectionItemUpdateOneWithoutMenuInput
  sections: SectionUpdateManyWithoutMenuInput
}

input MenuUpdateWithoutSectionItemDataInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String
  people: Int
  price: Float
  startDate: DateTime
  offer: OfferUpdateOneWithoutMenusInput
  sections: SectionUpdateManyWithoutMenuInput
}

input MenuUpdateWithoutSectionsDataInput {
  comment: String
  endDate: DateTime
  hasItemsCold: Boolean
  hasItemsDessert: Boolean
  hasItemsHot: Boolean
  hasItemsZCold: Boolean
  hasItemsZHot: Boolean
  kitchenNotes: String
  name: String
  people: Int
  price: Float
  startDate: DateTime
  offer: OfferUpdateOneWithoutMenusInput
  sectionItem: SectionItemUpdateOneWithoutMenuInput
}

input MenuUpdateWithWhereUniqueWithoutOfferInput {
  where: MenuWhereUniqueInput!
  data: MenuUpdateWithoutOfferDataInput!
}

input MenuUpsertWithoutSectionItemInput {
  update: MenuUpdateWithoutSectionItemDataInput!
  create: MenuCreateWithoutSectionItemInput!
}

input MenuUpsertWithoutSectionsInput {
  update: MenuUpdateWithoutSectionsDataInput!
  create: MenuCreateWithoutSectionsInput!
}

input MenuUpsertWithWhereUniqueWithoutOfferInput {
  where: MenuWhereUniqueInput!
  update: MenuUpdateWithoutOfferDataInput!
  create: MenuCreateWithoutOfferInput!
}

input MenuWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuWhereInput!]
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  hasItemsCold: Boolean

  """All values that are not equal to given value."""
  hasItemsCold_not: Boolean
  hasItemsDessert: Boolean

  """All values that are not equal to given value."""
  hasItemsDessert_not: Boolean
  hasItemsHot: Boolean

  """All values that are not equal to given value."""
  hasItemsHot_not: Boolean
  hasItemsZCold: Boolean

  """All values that are not equal to given value."""
  hasItemsZCold_not: Boolean
  hasItemsZHot: Boolean

  """All values that are not equal to given value."""
  hasItemsZHot_not: Boolean
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  kitchenNotes: String

  """All values that are not equal to given value."""
  kitchenNotes_not: String

  """All values that are contained in given list."""
  kitchenNotes_in: [String!]

  """All values that are not contained in given list."""
  kitchenNotes_not_in: [String!]

  """All values less than the given value."""
  kitchenNotes_lt: String

  """All values less than or equal the given value."""
  kitchenNotes_lte: String

  """All values greater than the given value."""
  kitchenNotes_gt: String

  """All values greater than or equal the given value."""
  kitchenNotes_gte: String

  """All values containing the given string."""
  kitchenNotes_contains: String

  """All values not containing the given string."""
  kitchenNotes_not_contains: String

  """All values starting with the given string."""
  kitchenNotes_starts_with: String

  """All values not starting with the given string."""
  kitchenNotes_not_starts_with: String

  """All values ending with the given string."""
  kitchenNotes_ends_with: String

  """All values not ending with the given string."""
  kitchenNotes_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  people: Int

  """All values that are not equal to given value."""
  people_not: Int

  """All values that are contained in given list."""
  people_in: [Int!]

  """All values that are not contained in given list."""
  people_not_in: [Int!]

  """All values less than the given value."""
  people_lt: Int

  """All values less than or equal the given value."""
  people_lte: Int

  """All values greater than the given value."""
  people_gt: Int

  """All values greater than or equal the given value."""
  people_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  offer: OfferWhereInput
  sectionItem: SectionItemWhereInput
  sections_every: SectionWhereInput
  sections_some: SectionWhereInput
  sections_none: SectionWhereInput
}

input MenuWhereUniqueInput {
  id: ID
}

type Mutation {
  createClient(data: ClientCreateInput!): Client!
  createCommunication(data: CommunicationCreateInput!): Communication!
  createOffer(data: OfferCreateInput!): Offer!
  createItemTranslation(data: ItemTranslationCreateInput!): ItemTranslation!
  createItemProposal(data: ItemProposalCreateInput!): ItemProposal!
  createItemProposalFlag(data: ItemProposalFlagCreateInput!): ItemProposalFlag!
  createItem(data: ItemCreateInput!): Item!
  createSection(data: SectionCreateInput!): Section!
  createUser(data: UserCreateInput!): User!
  createClientContact(data: ClientContactCreateInput!): ClientContact!
  createPlace(data: PlaceCreateInput!): Place!
  createBudget(data: BudgetCreateInput!): Budget!
  createBudgetLine(data: BudgetLineCreateInput!): BudgetLine!
  createCategory(data: CategoryCreateInput!): Category!
  createEmployee(data: EmployeeCreateInput!): Employee!
  createEmployeeEstimation(data: EmployeeEstimationCreateInput!): EmployeeEstimation!
  createEventStuff(data: EventStuffCreateInput!): EventStuff!
  createEventType(data: EventTypeCreateInput!): EventType!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  createJob(data: JobCreateInput!): Job!
  createPlaceContact(data: PlaceContactCreateInput!): PlaceContact!
  createSectionItem(data: SectionItemCreateInput!): SectionItem!
  createStuff(data: StuffCreateInput!): Stuff!
  createTax(data: TaxCreateInput!): Tax!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  createCountry(data: CountryCreateInput!): Country!
  createMenu(data: MenuCreateInput!): Menu!
  createEvent(data: EventCreateInput!): Event!
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateCommunication(data: CommunicationUpdateInput!, where: CommunicationWhereUniqueInput!): Communication
  updateOffer(data: OfferUpdateInput!, where: OfferWhereUniqueInput!): Offer
  updateItemTranslation(data: ItemTranslationUpdateInput!, where: ItemTranslationWhereUniqueInput!): ItemTranslation
  updateItemProposal(data: ItemProposalUpdateInput!, where: ItemProposalWhereUniqueInput!): ItemProposal
  updateItemProposalFlag(data: ItemProposalFlagUpdateInput!, where: ItemProposalFlagWhereUniqueInput!): ItemProposalFlag
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateClientContact(data: ClientContactUpdateInput!, where: ClientContactWhereUniqueInput!): ClientContact
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updateBudget(data: BudgetUpdateInput!, where: BudgetWhereUniqueInput!): Budget
  updateBudgetLine(data: BudgetLineUpdateInput!, where: BudgetLineWhereUniqueInput!): BudgetLine
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateEmployeeEstimation(data: EmployeeEstimationUpdateInput!, where: EmployeeEstimationWhereUniqueInput!): EmployeeEstimation
  updateEventStuff(data: EventStuffUpdateInput!, where: EventStuffWhereUniqueInput!): EventStuff
  updateEventType(data: EventTypeUpdateInput!, where: EventTypeWhereUniqueInput!): EventType
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updatePlaceContact(data: PlaceContactUpdateInput!, where: PlaceContactWhereUniqueInput!): PlaceContact
  updateSectionItem(data: SectionItemUpdateInput!, where: SectionItemWhereUniqueInput!): SectionItem
  updateStuff(data: StuffUpdateInput!, where: StuffWhereUniqueInput!): Stuff
  updateTax(data: TaxUpdateInput!, where: TaxWhereUniqueInput!): Tax
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateMenu(data: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteCommunication(where: CommunicationWhereUniqueInput!): Communication
  deleteOffer(where: OfferWhereUniqueInput!): Offer
  deleteItemTranslation(where: ItemTranslationWhereUniqueInput!): ItemTranslation
  deleteItemProposal(where: ItemProposalWhereUniqueInput!): ItemProposal
  deleteItemProposalFlag(where: ItemProposalFlagWhereUniqueInput!): ItemProposalFlag
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteUser(where: UserWhereUniqueInput!): User
  deleteClientContact(where: ClientContactWhereUniqueInput!): ClientContact
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deleteBudget(where: BudgetWhereUniqueInput!): Budget
  deleteBudgetLine(where: BudgetLineWhereUniqueInput!): BudgetLine
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployeeEstimation(where: EmployeeEstimationWhereUniqueInput!): EmployeeEstimation
  deleteEventStuff(where: EventStuffWhereUniqueInput!): EventStuff
  deleteEventType(where: EventTypeWhereUniqueInput!): EventType
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteJob(where: JobWhereUniqueInput!): Job
  deletePlaceContact(where: PlaceContactWhereUniqueInput!): PlaceContact
  deleteSectionItem(where: SectionItemWhereUniqueInput!): SectionItem
  deleteStuff(where: StuffWhereUniqueInput!): Stuff
  deleteTax(where: TaxWhereUniqueInput!): Tax
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteEvent(where: EventWhereUniqueInput!): Event
  upsertClient(where: ClientWhereUniqueInput!, create: ClientCreateInput!, update: ClientUpdateInput!): Client!
  upsertCommunication(where: CommunicationWhereUniqueInput!, create: CommunicationCreateInput!, update: CommunicationUpdateInput!): Communication!
  upsertOffer(where: OfferWhereUniqueInput!, create: OfferCreateInput!, update: OfferUpdateInput!): Offer!
  upsertItemTranslation(where: ItemTranslationWhereUniqueInput!, create: ItemTranslationCreateInput!, update: ItemTranslationUpdateInput!): ItemTranslation!
  upsertItemProposal(where: ItemProposalWhereUniqueInput!, create: ItemProposalCreateInput!, update: ItemProposalUpdateInput!): ItemProposal!
  upsertItemProposalFlag(where: ItemProposalFlagWhereUniqueInput!, create: ItemProposalFlagCreateInput!, update: ItemProposalFlagUpdateInput!): ItemProposalFlag!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertSection(where: SectionWhereUniqueInput!, create: SectionCreateInput!, update: SectionUpdateInput!): Section!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertClientContact(where: ClientContactWhereUniqueInput!, create: ClientContactCreateInput!, update: ClientContactUpdateInput!): ClientContact!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  upsertBudget(where: BudgetWhereUniqueInput!, create: BudgetCreateInput!, update: BudgetUpdateInput!): Budget!
  upsertBudgetLine(where: BudgetLineWhereUniqueInput!, create: BudgetLineCreateInput!, update: BudgetLineUpdateInput!): BudgetLine!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  upsertEmployeeEstimation(where: EmployeeEstimationWhereUniqueInput!, create: EmployeeEstimationCreateInput!, update: EmployeeEstimationUpdateInput!): EmployeeEstimation!
  upsertEventStuff(where: EventStuffWhereUniqueInput!, create: EventStuffCreateInput!, update: EventStuffUpdateInput!): EventStuff!
  upsertEventType(where: EventTypeWhereUniqueInput!, create: EventTypeCreateInput!, update: EventTypeUpdateInput!): EventType!
  upsertInvoice(where: InvoiceWhereUniqueInput!, create: InvoiceCreateInput!, update: InvoiceUpdateInput!): Invoice!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  upsertPlaceContact(where: PlaceContactWhereUniqueInput!, create: PlaceContactCreateInput!, update: PlaceContactUpdateInput!): PlaceContact!
  upsertSectionItem(where: SectionItemWhereUniqueInput!, create: SectionItemCreateInput!, update: SectionItemUpdateInput!): SectionItem!
  upsertStuff(where: StuffWhereUniqueInput!, create: StuffCreateInput!, update: StuffUpdateInput!): Stuff!
  upsertTax(where: TaxWhereUniqueInput!, create: TaxCreateInput!, update: TaxUpdateInput!): Tax!
  upsertVehicle(where: VehicleWhereUniqueInput!, create: VehicleCreateInput!, update: VehicleUpdateInput!): Vehicle!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertMenu(where: MenuWhereUniqueInput!, create: MenuCreateInput!, update: MenuUpdateInput!): Menu!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  updateManyClients(data: ClientUpdateInput!, where: ClientWhereInput): BatchPayload!
  updateManyCommunications(data: CommunicationUpdateInput!, where: CommunicationWhereInput): BatchPayload!
  updateManyOffers(data: OfferUpdateInput!, where: OfferWhereInput): BatchPayload!
  updateManyItemTranslations(data: ItemTranslationUpdateInput!, where: ItemTranslationWhereInput): BatchPayload!
  updateManyItemProposals(data: ItemProposalUpdateInput!, where: ItemProposalWhereInput): BatchPayload!
  updateManyItemProposalFlags(data: ItemProposalFlagUpdateInput!, where: ItemProposalFlagWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateInput!, where: ItemWhereInput): BatchPayload!
  updateManySections(data: SectionUpdateInput!, where: SectionWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyClientContacts(data: ClientContactUpdateInput!, where: ClientContactWhereInput): BatchPayload!
  updateManyPlaces(data: PlaceUpdateInput!, where: PlaceWhereInput): BatchPayload!
  updateManyBudgets(data: BudgetUpdateInput!, where: BudgetWhereInput): BatchPayload!
  updateManyBudgetLines(data: BudgetLineUpdateInput!, where: BudgetLineWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput): BatchPayload!
  updateManyEmployees(data: EmployeeUpdateInput!, where: EmployeeWhereInput): BatchPayload!
  updateManyEmployeeEstimations(data: EmployeeEstimationUpdateInput!, where: EmployeeEstimationWhereInput): BatchPayload!
  updateManyEventStuffs(data: EventStuffUpdateInput!, where: EventStuffWhereInput): BatchPayload!
  updateManyEventTypes(data: EventTypeUpdateInput!, where: EventTypeWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyJobs(data: JobUpdateInput!, where: JobWhereInput): BatchPayload!
  updateManyPlaceContacts(data: PlaceContactUpdateInput!, where: PlaceContactWhereInput): BatchPayload!
  updateManySectionItems(data: SectionItemUpdateInput!, where: SectionItemWhereInput): BatchPayload!
  updateManyStuffs(data: StuffUpdateInput!, where: StuffWhereInput): BatchPayload!
  updateManyTaxes(data: TaxUpdateInput!, where: TaxWhereInput): BatchPayload!
  updateManyVehicles(data: VehicleUpdateInput!, where: VehicleWhereInput): BatchPayload!
  updateManyCountries(data: CountryUpdateInput!, where: CountryWhereInput): BatchPayload!
  updateManyMenus(data: MenuUpdateInput!, where: MenuWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  deleteManyClients(where: ClientWhereInput): BatchPayload!
  deleteManyCommunications(where: CommunicationWhereInput): BatchPayload!
  deleteManyOffers(where: OfferWhereInput): BatchPayload!
  deleteManyItemTranslations(where: ItemTranslationWhereInput): BatchPayload!
  deleteManyItemProposals(where: ItemProposalWhereInput): BatchPayload!
  deleteManyItemProposalFlags(where: ItemProposalFlagWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManySections(where: SectionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyClientContacts(where: ClientContactWhereInput): BatchPayload!
  deleteManyPlaces(where: PlaceWhereInput): BatchPayload!
  deleteManyBudgets(where: BudgetWhereInput): BatchPayload!
  deleteManyBudgetLines(where: BudgetLineWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  deleteManyEmployeeEstimations(where: EmployeeEstimationWhereInput): BatchPayload!
  deleteManyEventStuffs(where: EventStuffWhereInput): BatchPayload!
  deleteManyEventTypes(where: EventTypeWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  deleteManyPlaceContacts(where: PlaceContactWhereInput): BatchPayload!
  deleteManySectionItems(where: SectionItemWhereInput): BatchPayload!
  deleteManyStuffs(where: StuffWhereInput): BatchPayload!
  deleteManyTaxes(where: TaxWhereInput): BatchPayload!
  deleteManyVehicles(where: VehicleWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyMenus(where: MenuWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Offer implements Node {
  client(where: ClientWhereInput): Client
  createdAt: DateTime!
  customMessage: String
  event(where: EventWhereInput): Event
  id: ID!
  status: StatusOffer!
  address: String!
  budgetLines(where: BudgetLineWhereInput, orderBy: BudgetLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BudgetLine!]
  city: String!
  clientContact(where: ClientContactWhereInput): ClientContact
  communications(where: CommunicationWhereInput, orderBy: CommunicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Communication!]
  employeeEstimations(where: EmployeeEstimationWhereInput, orderBy: EmployeeEstimationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeeEstimation!]
  endTime: DateTime
  eventType(where: EventTypeWhereInput): EventType
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  place(where: PlaceWhereInput): Place
  postalCode: String!
  rev: String
  sectionItems(where: SectionItemWhereInput, orderBy: SectionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SectionItem!]
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  menus(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Menu!]
}

"""A connection to a list of items."""
type OfferConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OfferEdge]!
  aggregate: AggregateOffer!
}

input OfferCreateInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateManyWithoutClientContactInput {
  create: [OfferCreateWithoutClientContactInput!]
  connect: [OfferWhereUniqueInput!]
}

input OfferCreateManyWithoutClientInput {
  create: [OfferCreateWithoutClientInput!]
  connect: [OfferWhereUniqueInput!]
}

input OfferCreateManyWithoutEventTypeInput {
  create: [OfferCreateWithoutEventTypeInput!]
  connect: [OfferWhereUniqueInput!]
}

input OfferCreateOneWithoutBudgetLinesInput {
  create: OfferCreateWithoutBudgetLinesInput
  connect: OfferWhereUniqueInput
}

input OfferCreateOneWithoutCommunicationsInput {
  create: OfferCreateWithoutCommunicationsInput
  connect: OfferWhereUniqueInput
}

input OfferCreateOneWithoutEmployeeEstimationsInput {
  create: OfferCreateWithoutEmployeeEstimationsInput
  connect: OfferWhereUniqueInput
}

input OfferCreateOneWithoutEventInput {
  create: OfferCreateWithoutEventInput
  connect: OfferWhereUniqueInput
}

input OfferCreateOneWithoutMenusInput {
  create: OfferCreateWithoutMenusInput
  connect: OfferWhereUniqueInput
}

input OfferCreateOneWithoutPlaceInput {
  create: OfferCreateWithoutPlaceInput
  connect: OfferWhereUniqueInput
}

input OfferCreateOneWithoutSectionItemsInput {
  create: OfferCreateWithoutSectionItemsInput
  connect: OfferWhereUniqueInput
}

input OfferCreateWithoutBudgetLinesInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutClientContactInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutClientInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutCommunicationsInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutEmployeeEstimationsInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutEventInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutEventTypeInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutMenusInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
}

input OfferCreateWithoutPlaceInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  sectionItems: SectionItemCreateManyWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

input OfferCreateWithoutSectionItemsInput {
  customMessage: String
  status: StatusOffer
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientCreateOneWithoutOffersInput
  event: EventCreateOneWithoutOfferInput
  budgetLines: BudgetLineCreateManyWithoutOfferInput
  clientContact: ClientContactCreateOneWithoutOffersInput
  communications: CommunicationCreateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationCreateManyWithoutOfferInput
  eventType: EventTypeCreateOneWithoutOffersInput
  place: PlaceCreateOneWithoutOfferInput
  menus: MenuCreateManyWithoutOfferInput
}

"""An edge in a connection."""
type OfferEdge {
  """The item at the end of the edge."""
  node: Offer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OfferOrderByInput {
  createdAt_ASC
  createdAt_DESC
  customMessage_ASC
  customMessage_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  endTime_ASC
  endTime_DESC
  gmtOffset_ASC
  gmtOffset_DESC
  language_ASC
  language_DESC
  maxPersons_ASC
  maxPersons_DESC
  minPersons_ASC
  minPersons_DESC
  name_ASC
  name_DESC
  postalCode_ASC
  postalCode_DESC
  rev_ASC
  rev_DESC
  showTotalBudgetsPdf_ASC
  showTotalBudgetsPdf_DESC
  startTime_ASC
  startTime_DESC
  version_ASC
  version_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OfferPreviousValues {
  createdAt: DateTime!
  customMessage: String
  id: ID!
  status: StatusOffer!
  address: String!
  city: String!
  endTime: DateTime
  gmtOffset: String!
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String!
  postalCode: String!
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
}

type OfferSubscriptionPayload {
  mutation: MutationType!
  node: Offer
  updatedFields: [String!]
  previousValues: OfferPreviousValues
}

input OfferSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OfferSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfferSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfferSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OfferWhereInput
}

input OfferUpdateInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateManyWithoutClientContactInput {
  create: [OfferCreateWithoutClientContactInput!]
  connect: [OfferWhereUniqueInput!]
  disconnect: [OfferWhereUniqueInput!]
  delete: [OfferWhereUniqueInput!]
  update: [OfferUpdateWithWhereUniqueWithoutClientContactInput!]
  upsert: [OfferUpsertWithWhereUniqueWithoutClientContactInput!]
}

input OfferUpdateManyWithoutClientInput {
  create: [OfferCreateWithoutClientInput!]
  connect: [OfferWhereUniqueInput!]
  disconnect: [OfferWhereUniqueInput!]
  delete: [OfferWhereUniqueInput!]
  update: [OfferUpdateWithWhereUniqueWithoutClientInput!]
  upsert: [OfferUpsertWithWhereUniqueWithoutClientInput!]
}

input OfferUpdateManyWithoutEventTypeInput {
  create: [OfferCreateWithoutEventTypeInput!]
  connect: [OfferWhereUniqueInput!]
  disconnect: [OfferWhereUniqueInput!]
  delete: [OfferWhereUniqueInput!]
  update: [OfferUpdateWithWhereUniqueWithoutEventTypeInput!]
  upsert: [OfferUpsertWithWhereUniqueWithoutEventTypeInput!]
}

input OfferUpdateOneWithoutBudgetLinesInput {
  create: OfferCreateWithoutBudgetLinesInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutBudgetLinesDataInput
  upsert: OfferUpsertWithoutBudgetLinesInput
}

input OfferUpdateOneWithoutCommunicationsInput {
  create: OfferCreateWithoutCommunicationsInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutCommunicationsDataInput
  upsert: OfferUpsertWithoutCommunicationsInput
}

input OfferUpdateOneWithoutEmployeeEstimationsInput {
  create: OfferCreateWithoutEmployeeEstimationsInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutEmployeeEstimationsDataInput
  upsert: OfferUpsertWithoutEmployeeEstimationsInput
}

input OfferUpdateOneWithoutEventInput {
  create: OfferCreateWithoutEventInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutEventDataInput
  upsert: OfferUpsertWithoutEventInput
}

input OfferUpdateOneWithoutMenusInput {
  create: OfferCreateWithoutMenusInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutMenusDataInput
  upsert: OfferUpsertWithoutMenusInput
}

input OfferUpdateOneWithoutPlaceInput {
  create: OfferCreateWithoutPlaceInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutPlaceDataInput
  upsert: OfferUpsertWithoutPlaceInput
}

input OfferUpdateOneWithoutSectionItemsInput {
  create: OfferCreateWithoutSectionItemsInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfferUpdateWithoutSectionItemsDataInput
  upsert: OfferUpsertWithoutSectionItemsInput
}

input OfferUpdateWithoutBudgetLinesDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutClientContactDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutClientDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutCommunicationsDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutEmployeeEstimationsDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutEventDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutEventTypeDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutMenusDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutPlaceDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  sectionItems: SectionItemUpdateManyWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithoutSectionItemsDataInput {
  customMessage: String
  status: StatusOffer
  address: String
  city: String
  endTime: DateTime
  gmtOffset: String
  language: LanguageEnum
  maxPersons: Int
  minPersons: Int
  name: String
  postalCode: String
  rev: String
  showTotalBudgetsPdf: Boolean
  startTime: DateTime
  version: Int
  client: ClientUpdateOneWithoutOffersInput
  event: EventUpdateOneWithoutOfferInput
  budgetLines: BudgetLineUpdateManyWithoutOfferInput
  clientContact: ClientContactUpdateOneWithoutOffersInput
  communications: CommunicationUpdateManyWithoutOfferInput
  employeeEstimations: EmployeeEstimationUpdateManyWithoutOfferInput
  eventType: EventTypeUpdateOneWithoutOffersInput
  place: PlaceUpdateOneWithoutOfferInput
  menus: MenuUpdateManyWithoutOfferInput
}

input OfferUpdateWithWhereUniqueWithoutClientContactInput {
  where: OfferWhereUniqueInput!
  data: OfferUpdateWithoutClientContactDataInput!
}

input OfferUpdateWithWhereUniqueWithoutClientInput {
  where: OfferWhereUniqueInput!
  data: OfferUpdateWithoutClientDataInput!
}

input OfferUpdateWithWhereUniqueWithoutEventTypeInput {
  where: OfferWhereUniqueInput!
  data: OfferUpdateWithoutEventTypeDataInput!
}

input OfferUpsertWithoutBudgetLinesInput {
  update: OfferUpdateWithoutBudgetLinesDataInput!
  create: OfferCreateWithoutBudgetLinesInput!
}

input OfferUpsertWithoutCommunicationsInput {
  update: OfferUpdateWithoutCommunicationsDataInput!
  create: OfferCreateWithoutCommunicationsInput!
}

input OfferUpsertWithoutEmployeeEstimationsInput {
  update: OfferUpdateWithoutEmployeeEstimationsDataInput!
  create: OfferCreateWithoutEmployeeEstimationsInput!
}

input OfferUpsertWithoutEventInput {
  update: OfferUpdateWithoutEventDataInput!
  create: OfferCreateWithoutEventInput!
}

input OfferUpsertWithoutMenusInput {
  update: OfferUpdateWithoutMenusDataInput!
  create: OfferCreateWithoutMenusInput!
}

input OfferUpsertWithoutPlaceInput {
  update: OfferUpdateWithoutPlaceDataInput!
  create: OfferCreateWithoutPlaceInput!
}

input OfferUpsertWithoutSectionItemsInput {
  update: OfferUpdateWithoutSectionItemsDataInput!
  create: OfferCreateWithoutSectionItemsInput!
}

input OfferUpsertWithWhereUniqueWithoutClientContactInput {
  where: OfferWhereUniqueInput!
  update: OfferUpdateWithoutClientContactDataInput!
  create: OfferCreateWithoutClientContactInput!
}

input OfferUpsertWithWhereUniqueWithoutClientInput {
  where: OfferWhereUniqueInput!
  update: OfferUpdateWithoutClientDataInput!
  create: OfferCreateWithoutClientInput!
}

input OfferUpsertWithWhereUniqueWithoutEventTypeInput {
  where: OfferWhereUniqueInput!
  update: OfferUpdateWithoutEventTypeDataInput!
  create: OfferCreateWithoutEventTypeInput!
}

input OfferWhereInput {
  """Logical AND on all given filters."""
  AND: [OfferWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfferWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfferWhereInput!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  customMessage: String

  """All values that are not equal to given value."""
  customMessage_not: String

  """All values that are contained in given list."""
  customMessage_in: [String!]

  """All values that are not contained in given list."""
  customMessage_not_in: [String!]

  """All values less than the given value."""
  customMessage_lt: String

  """All values less than or equal the given value."""
  customMessage_lte: String

  """All values greater than the given value."""
  customMessage_gt: String

  """All values greater than or equal the given value."""
  customMessage_gte: String

  """All values containing the given string."""
  customMessage_contains: String

  """All values not containing the given string."""
  customMessage_not_contains: String

  """All values starting with the given string."""
  customMessage_starts_with: String

  """All values not starting with the given string."""
  customMessage_not_starts_with: String

  """All values ending with the given string."""
  customMessage_ends_with: String

  """All values not ending with the given string."""
  customMessage_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: StatusOffer

  """All values that are not equal to given value."""
  status_not: StatusOffer

  """All values that are contained in given list."""
  status_in: [StatusOffer!]

  """All values that are not contained in given list."""
  status_not_in: [StatusOffer!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  gmtOffset: String

  """All values that are not equal to given value."""
  gmtOffset_not: String

  """All values that are contained in given list."""
  gmtOffset_in: [String!]

  """All values that are not contained in given list."""
  gmtOffset_not_in: [String!]

  """All values less than the given value."""
  gmtOffset_lt: String

  """All values less than or equal the given value."""
  gmtOffset_lte: String

  """All values greater than the given value."""
  gmtOffset_gt: String

  """All values greater than or equal the given value."""
  gmtOffset_gte: String

  """All values containing the given string."""
  gmtOffset_contains: String

  """All values not containing the given string."""
  gmtOffset_not_contains: String

  """All values starting with the given string."""
  gmtOffset_starts_with: String

  """All values not starting with the given string."""
  gmtOffset_not_starts_with: String

  """All values ending with the given string."""
  gmtOffset_ends_with: String

  """All values not ending with the given string."""
  gmtOffset_not_ends_with: String
  language: LanguageEnum

  """All values that are not equal to given value."""
  language_not: LanguageEnum

  """All values that are contained in given list."""
  language_in: [LanguageEnum!]

  """All values that are not contained in given list."""
  language_not_in: [LanguageEnum!]
  maxPersons: Int

  """All values that are not equal to given value."""
  maxPersons_not: Int

  """All values that are contained in given list."""
  maxPersons_in: [Int!]

  """All values that are not contained in given list."""
  maxPersons_not_in: [Int!]

  """All values less than the given value."""
  maxPersons_lt: Int

  """All values less than or equal the given value."""
  maxPersons_lte: Int

  """All values greater than the given value."""
  maxPersons_gt: Int

  """All values greater than or equal the given value."""
  maxPersons_gte: Int
  minPersons: Int

  """All values that are not equal to given value."""
  minPersons_not: Int

  """All values that are contained in given list."""
  minPersons_in: [Int!]

  """All values that are not contained in given list."""
  minPersons_not_in: [Int!]

  """All values less than the given value."""
  minPersons_lt: Int

  """All values less than or equal the given value."""
  minPersons_lte: Int

  """All values greater than the given value."""
  minPersons_gt: Int

  """All values greater than or equal the given value."""
  minPersons_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  rev: String

  """All values that are not equal to given value."""
  rev_not: String

  """All values that are contained in given list."""
  rev_in: [String!]

  """All values that are not contained in given list."""
  rev_not_in: [String!]

  """All values less than the given value."""
  rev_lt: String

  """All values less than or equal the given value."""
  rev_lte: String

  """All values greater than the given value."""
  rev_gt: String

  """All values greater than or equal the given value."""
  rev_gte: String

  """All values containing the given string."""
  rev_contains: String

  """All values not containing the given string."""
  rev_not_contains: String

  """All values starting with the given string."""
  rev_starts_with: String

  """All values not starting with the given string."""
  rev_not_starts_with: String

  """All values ending with the given string."""
  rev_ends_with: String

  """All values not ending with the given string."""
  rev_not_ends_with: String
  showTotalBudgetsPdf: Boolean

  """All values that are not equal to given value."""
  showTotalBudgetsPdf_not: Boolean
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  version: Int

  """All values that are not equal to given value."""
  version_not: Int

  """All values that are contained in given list."""
  version_in: [Int!]

  """All values that are not contained in given list."""
  version_not_in: [Int!]

  """All values less than the given value."""
  version_lt: Int

  """All values less than or equal the given value."""
  version_lte: Int

  """All values greater than the given value."""
  version_gt: Int

  """All values greater than or equal the given value."""
  version_gte: Int
  client: ClientWhereInput
  event: EventWhereInput
  budgetLines_every: BudgetLineWhereInput
  budgetLines_some: BudgetLineWhereInput
  budgetLines_none: BudgetLineWhereInput
  clientContact: ClientContactWhereInput
  communications_every: CommunicationWhereInput
  communications_some: CommunicationWhereInput
  communications_none: CommunicationWhereInput
  employeeEstimations_every: EmployeeEstimationWhereInput
  employeeEstimations_some: EmployeeEstimationWhereInput
  employeeEstimations_none: EmployeeEstimationWhereInput
  eventType: EventTypeWhereInput
  place: PlaceWhereInput
  sectionItems_every: SectionItemWhereInput
  sectionItems_some: SectionItemWhereInput
  sectionItems_none: SectionItemWhereInput
  menus_every: MenuWhereInput
  menus_some: MenuWhereInput
  menus_none: MenuWhereInput
}

input OfferWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Place implements Node {
  address: String!
  city: String!
  id: ID!
  name: String!
  postalCode: String!
  note: String
  offer(where: OfferWhereInput): Offer
  placeContacts(where: PlaceContactWhereInput, orderBy: PlaceContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceContact!]
}

"""A connection to a list of items."""
type PlaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

type PlaceContact implements Node {
  email: String
  id: ID!
  mobilePhone: String
  name: String!
  phoneNumber: String
  place(where: PlaceWhereInput): Place
}

"""A connection to a list of items."""
type PlaceContactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlaceContactEdge]!
  aggregate: AggregatePlaceContact!
}

input PlaceContactCreateInput {
  email: String
  mobilePhone: String
  name: String!
  phoneNumber: String
  place: PlaceCreateOneWithoutPlaceContactsInput
}

input PlaceContactCreateManyWithoutPlaceInput {
  create: [PlaceContactCreateWithoutPlaceInput!]
  connect: [PlaceContactWhereUniqueInput!]
}

input PlaceContactCreateWithoutPlaceInput {
  email: String
  mobilePhone: String
  name: String!
  phoneNumber: String
}

"""An edge in a connection."""
type PlaceContactEdge {
  """The item at the end of the edge."""
  node: PlaceContact!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlaceContactOrderByInput {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  mobilePhone_ASC
  mobilePhone_DESC
  name_ASC
  name_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlaceContactPreviousValues {
  email: String
  id: ID!
  mobilePhone: String
  name: String!
  phoneNumber: String
}

type PlaceContactSubscriptionPayload {
  mutation: MutationType!
  node: PlaceContact
  updatedFields: [String!]
  previousValues: PlaceContactPreviousValues
}

input PlaceContactSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceContactSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceContactSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceContactSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlaceContactWhereInput
}

input PlaceContactUpdateInput {
  email: String
  mobilePhone: String
  name: String
  phoneNumber: String
  place: PlaceUpdateOneWithoutPlaceContactsInput
}

input PlaceContactUpdateManyWithoutPlaceInput {
  create: [PlaceContactCreateWithoutPlaceInput!]
  connect: [PlaceContactWhereUniqueInput!]
  disconnect: [PlaceContactWhereUniqueInput!]
  delete: [PlaceContactWhereUniqueInput!]
  update: [PlaceContactUpdateWithWhereUniqueWithoutPlaceInput!]
  upsert: [PlaceContactUpsertWithWhereUniqueWithoutPlaceInput!]
}

input PlaceContactUpdateWithoutPlaceDataInput {
  email: String
  mobilePhone: String
  name: String
  phoneNumber: String
}

input PlaceContactUpdateWithWhereUniqueWithoutPlaceInput {
  where: PlaceContactWhereUniqueInput!
  data: PlaceContactUpdateWithoutPlaceDataInput!
}

input PlaceContactUpsertWithWhereUniqueWithoutPlaceInput {
  where: PlaceContactWhereUniqueInput!
  update: PlaceContactUpdateWithoutPlaceDataInput!
  create: PlaceContactCreateWithoutPlaceInput!
}

input PlaceContactWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceContactWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceContactWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceContactWhereInput!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  mobilePhone: String

  """All values that are not equal to given value."""
  mobilePhone_not: String

  """All values that are contained in given list."""
  mobilePhone_in: [String!]

  """All values that are not contained in given list."""
  mobilePhone_not_in: [String!]

  """All values less than the given value."""
  mobilePhone_lt: String

  """All values less than or equal the given value."""
  mobilePhone_lte: String

  """All values greater than the given value."""
  mobilePhone_gt: String

  """All values greater than or equal the given value."""
  mobilePhone_gte: String

  """All values containing the given string."""
  mobilePhone_contains: String

  """All values not containing the given string."""
  mobilePhone_not_contains: String

  """All values starting with the given string."""
  mobilePhone_starts_with: String

  """All values not starting with the given string."""
  mobilePhone_not_starts_with: String

  """All values ending with the given string."""
  mobilePhone_ends_with: String

  """All values not ending with the given string."""
  mobilePhone_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  place: PlaceWhereInput
}

input PlaceContactWhereUniqueInput {
  id: ID
}

input PlaceCreateInput {
  address: String!
  city: String!
  name: String!
  postalCode: String!
  note: String
  offer: OfferCreateOneWithoutPlaceInput
  placeContacts: PlaceContactCreateManyWithoutPlaceInput
}

input PlaceCreateOneWithoutOfferInput {
  create: PlaceCreateWithoutOfferInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutPlaceContactsInput {
  create: PlaceCreateWithoutPlaceContactsInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateWithoutOfferInput {
  address: String!
  city: String!
  name: String!
  postalCode: String!
  note: String
  placeContacts: PlaceContactCreateManyWithoutPlaceInput
}

input PlaceCreateWithoutPlaceContactsInput {
  address: String!
  city: String!
  name: String!
  postalCode: String!
  note: String
  offer: OfferCreateOneWithoutPlaceInput
}

"""An edge in a connection."""
type PlaceEdge {
  """The item at the end of the edge."""
  node: Place!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlaceOrderByInput {
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  postalCode_ASC
  postalCode_DESC
  note_ASC
  note_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlacePreviousValues {
  address: String!
  city: String!
  id: ID!
  name: String!
  postalCode: String!
  note: String
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
}

input PlaceUpdateInput {
  address: String
  city: String
  name: String
  postalCode: String
  note: String
  offer: OfferUpdateOneWithoutPlaceInput
  placeContacts: PlaceContactUpdateManyWithoutPlaceInput
}

input PlaceUpdateOneWithoutOfferInput {
  create: PlaceCreateWithoutOfferInput
  connect: PlaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlaceUpdateWithoutOfferDataInput
  upsert: PlaceUpsertWithoutOfferInput
}

input PlaceUpdateOneWithoutPlaceContactsInput {
  create: PlaceCreateWithoutPlaceContactsInput
  connect: PlaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlaceUpdateWithoutPlaceContactsDataInput
  upsert: PlaceUpsertWithoutPlaceContactsInput
}

input PlaceUpdateWithoutOfferDataInput {
  address: String
  city: String
  name: String
  postalCode: String
  note: String
  placeContacts: PlaceContactUpdateManyWithoutPlaceInput
}

input PlaceUpdateWithoutPlaceContactsDataInput {
  address: String
  city: String
  name: String
  postalCode: String
  note: String
  offer: OfferUpdateOneWithoutPlaceInput
}

input PlaceUpsertWithoutOfferInput {
  update: PlaceUpdateWithoutOfferDataInput!
  create: PlaceCreateWithoutOfferInput!
}

input PlaceUpsertWithoutPlaceContactsInput {
  update: PlaceUpdateWithoutPlaceContactsDataInput!
  create: PlaceCreateWithoutPlaceContactsInput!
}

input PlaceWhereInput {
  """Logical AND on all given filters."""
  AND: [PlaceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlaceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlaceWhereInput!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  offer: OfferWhereInput
  placeContacts_every: PlaceContactWhereInput
  placeContacts_some: PlaceContactWhereInput
  placeContacts_none: PlaceContactWhereInput
}

input PlaceWhereUniqueInput {
  id: ID
}

type Query {
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client]!
  communications(where: CommunicationWhereInput, orderBy: CommunicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Communication]!
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer]!
  itemTranslations(where: ItemTranslationWhereInput, orderBy: ItemTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemTranslation]!
  itemProposals(where: ItemProposalWhereInput, orderBy: ItemProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemProposal]!
  itemProposalFlags(where: ItemProposalFlagWhereInput, orderBy: ItemProposalFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemProposalFlag]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  clientContacts(where: ClientContactWhereInput, orderBy: ClientContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClientContact]!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  budgets(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Budget]!
  budgetLines(where: BudgetLineWhereInput, orderBy: BudgetLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BudgetLine]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  employeeEstimations(where: EmployeeEstimationWhereInput, orderBy: EmployeeEstimationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeeEstimation]!
  eventStuffs(where: EventStuffWhereInput, orderBy: EventStuffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventStuff]!
  eventTypes(where: EventTypeWhereInput, orderBy: EventTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventType]!
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice]!
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  placeContacts(where: PlaceContactWhereInput, orderBy: PlaceContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceContact]!
  sectionItems(where: SectionItemWhereInput, orderBy: SectionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SectionItem]!
  stuffs(where: StuffWhereInput, orderBy: StuffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stuff]!
  taxes(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tax]!
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  menus(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Menu]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  client(where: ClientWhereUniqueInput!): Client
  communication(where: CommunicationWhereUniqueInput!): Communication
  offer(where: OfferWhereUniqueInput!): Offer
  itemTranslation(where: ItemTranslationWhereUniqueInput!): ItemTranslation
  itemProposal(where: ItemProposalWhereUniqueInput!): ItemProposal
  itemProposalFlag(where: ItemProposalFlagWhereUniqueInput!): ItemProposalFlag
  item(where: ItemWhereUniqueInput!): Item
  section(where: SectionWhereUniqueInput!): Section
  user(where: UserWhereUniqueInput!): User
  clientContact(where: ClientContactWhereUniqueInput!): ClientContact
  place(where: PlaceWhereUniqueInput!): Place
  budget(where: BudgetWhereUniqueInput!): Budget
  budgetLine(where: BudgetLineWhereUniqueInput!): BudgetLine
  category(where: CategoryWhereUniqueInput!): Category
  employee(where: EmployeeWhereUniqueInput!): Employee
  employeeEstimation(where: EmployeeEstimationWhereUniqueInput!): EmployeeEstimation
  eventStuff(where: EventStuffWhereUniqueInput!): EventStuff
  eventType(where: EventTypeWhereUniqueInput!): EventType
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  job(where: JobWhereUniqueInput!): Job
  placeContact(where: PlaceContactWhereUniqueInput!): PlaceContact
  sectionItem(where: SectionItemWhereUniqueInput!): SectionItem
  stuff(where: StuffWhereUniqueInput!): Stuff
  tax(where: TaxWhereUniqueInput!): Tax
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  country(where: CountryWhereUniqueInput!): Country
  menu(where: MenuWhereUniqueInput!): Menu
  event(where: EventWhereUniqueInput!): Event
  clientsConnection(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientConnection!
  communicationsConnection(where: CommunicationWhereInput, orderBy: CommunicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommunicationConnection!
  offersConnection(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfferConnection!
  itemTranslationsConnection(where: ItemTranslationWhereInput, orderBy: ItemTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemTranslationConnection!
  itemProposalsConnection(where: ItemProposalWhereInput, orderBy: ItemProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemProposalConnection!
  itemProposalFlagsConnection(where: ItemProposalFlagWhereInput, orderBy: ItemProposalFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemProposalFlagConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  sectionsConnection(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  clientContactsConnection(where: ClientContactWhereInput, orderBy: ClientContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientContactConnection!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  budgetsConnection(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BudgetConnection!
  budgetLinesConnection(where: BudgetLineWhereInput, orderBy: BudgetLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BudgetLineConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  employeeEstimationsConnection(where: EmployeeEstimationWhereInput, orderBy: EmployeeEstimationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeEstimationConnection!
  eventStuffsConnection(where: EventStuffWhereInput, orderBy: EventStuffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventStuffConnection!
  eventTypesConnection(where: EventTypeWhereInput, orderBy: EventTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventTypeConnection!
  invoicesConnection(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceConnection!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  placeContactsConnection(where: PlaceContactWhereInput, orderBy: PlaceContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceContactConnection!
  sectionItemsConnection(where: SectionItemWhereInput, orderBy: SectionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionItemConnection!
  stuffsConnection(where: StuffWhereInput, orderBy: StuffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StuffConnection!
  taxesConnection(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaxConnection!
  vehiclesConnection(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  menusConnection(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  Admin
  Freelance
  Employee
}

type Section implements Node {
  id: ID!
  itemProposals(where: ItemProposalWhereInput, orderBy: ItemProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemProposal!]
  menu(where: MenuWhereInput): Menu
  name: String
  showPdf: Boolean
}

"""A connection to a list of items."""
type SectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SectionEdge]!
  aggregate: AggregateSection!
}

input SectionCreateInput {
  name: String
  showPdf: Boolean
  itemProposals: ItemProposalCreateManyWithoutSectionInput
  menu: MenuCreateOneWithoutSectionsInput
}

input SectionCreateManyWithoutMenuInput {
  create: [SectionCreateWithoutMenuInput!]
  connect: [SectionWhereUniqueInput!]
}

input SectionCreateOneWithoutItemProposalsInput {
  create: SectionCreateWithoutItemProposalsInput
  connect: SectionWhereUniqueInput
}

input SectionCreateWithoutItemProposalsInput {
  name: String
  showPdf: Boolean
  menu: MenuCreateOneWithoutSectionsInput
}

input SectionCreateWithoutMenuInput {
  name: String
  showPdf: Boolean
  itemProposals: ItemProposalCreateManyWithoutSectionInput
}

"""An edge in a connection."""
type SectionEdge {
  """The item at the end of the edge."""
  node: Section!

  """A cursor for use in pagination."""
  cursor: String!
}

type SectionItem implements Node {
  content: String
  h: Int!
  i: String!
  id: ID!
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  offer(where: OfferWhereInput): Offer
  static: Boolean
  type: SectionTypes!
  w: Int!
  x: Int!
  y: Int!
  menu(where: MenuWhereInput): Menu
}

"""A connection to a list of items."""
type SectionItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SectionItemEdge]!
  aggregate: AggregateSectionItem!
}

input SectionItemCreateInput {
  content: String
  h: Int!
  i: String!
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes
  w: Int!
  x: Int!
  y: Int
  offer: OfferCreateOneWithoutSectionItemsInput
  menu: MenuCreateOneWithoutSectionItemInput
}

input SectionItemCreateManyWithoutOfferInput {
  create: [SectionItemCreateWithoutOfferInput!]
  connect: [SectionItemWhereUniqueInput!]
}

input SectionItemCreateOneWithoutMenuInput {
  create: SectionItemCreateWithoutMenuInput
  connect: SectionItemWhereUniqueInput
}

input SectionItemCreateWithoutMenuInput {
  content: String
  h: Int!
  i: String!
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes
  w: Int!
  x: Int!
  y: Int
  offer: OfferCreateOneWithoutSectionItemsInput
}

input SectionItemCreateWithoutOfferInput {
  content: String
  h: Int!
  i: String!
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes
  w: Int!
  x: Int!
  y: Int
  menu: MenuCreateOneWithoutSectionItemInput
}

"""An edge in a connection."""
type SectionItemEdge {
  """The item at the end of the edge."""
  node: SectionItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SectionItemOrderByInput {
  content_ASC
  content_DESC
  h_ASC
  h_DESC
  i_ASC
  i_DESC
  id_ASC
  id_DESC
  isDraggable_ASC
  isDraggable_DESC
  isResizable_ASC
  isResizable_DESC
  maxH_ASC
  maxH_DESC
  maxW_ASC
  maxW_DESC
  minH_ASC
  minH_DESC
  minW_ASC
  minW_DESC
  moved_ASC
  moved_DESC
  static_ASC
  static_DESC
  type_ASC
  type_DESC
  w_ASC
  w_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SectionItemPreviousValues {
  content: String
  h: Int!
  i: String!
  id: ID!
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes!
  w: Int!
  x: Int!
  y: Int!
}

type SectionItemSubscriptionPayload {
  mutation: MutationType!
  node: SectionItem
  updatedFields: [String!]
  previousValues: SectionItemPreviousValues
}

input SectionItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SectionItemWhereInput
}

input SectionItemUpdateInput {
  content: String
  h: Int
  i: String
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes
  w: Int
  x: Int
  y: Int
  offer: OfferUpdateOneWithoutSectionItemsInput
  menu: MenuUpdateOneWithoutSectionItemInput
}

input SectionItemUpdateManyWithoutOfferInput {
  create: [SectionItemCreateWithoutOfferInput!]
  connect: [SectionItemWhereUniqueInput!]
  disconnect: [SectionItemWhereUniqueInput!]
  delete: [SectionItemWhereUniqueInput!]
  update: [SectionItemUpdateWithWhereUniqueWithoutOfferInput!]
  upsert: [SectionItemUpsertWithWhereUniqueWithoutOfferInput!]
}

input SectionItemUpdateOneWithoutMenuInput {
  create: SectionItemCreateWithoutMenuInput
  connect: SectionItemWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SectionItemUpdateWithoutMenuDataInput
  upsert: SectionItemUpsertWithoutMenuInput
}

input SectionItemUpdateWithoutMenuDataInput {
  content: String
  h: Int
  i: String
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes
  w: Int
  x: Int
  y: Int
  offer: OfferUpdateOneWithoutSectionItemsInput
}

input SectionItemUpdateWithoutOfferDataInput {
  content: String
  h: Int
  i: String
  isDraggable: Boolean
  isResizable: Boolean
  maxH: Int
  maxW: Int
  minH: Int
  minW: Int
  moved: Boolean
  static: Boolean
  type: SectionTypes
  w: Int
  x: Int
  y: Int
  menu: MenuUpdateOneWithoutSectionItemInput
}

input SectionItemUpdateWithWhereUniqueWithoutOfferInput {
  where: SectionItemWhereUniqueInput!
  data: SectionItemUpdateWithoutOfferDataInput!
}

input SectionItemUpsertWithoutMenuInput {
  update: SectionItemUpdateWithoutMenuDataInput!
  create: SectionItemCreateWithoutMenuInput!
}

input SectionItemUpsertWithWhereUniqueWithoutOfferInput {
  where: SectionItemWhereUniqueInput!
  update: SectionItemUpdateWithoutOfferDataInput!
  create: SectionItemCreateWithoutOfferInput!
}

input SectionItemWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionItemWhereInput!]
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  h: Int

  """All values that are not equal to given value."""
  h_not: Int

  """All values that are contained in given list."""
  h_in: [Int!]

  """All values that are not contained in given list."""
  h_not_in: [Int!]

  """All values less than the given value."""
  h_lt: Int

  """All values less than or equal the given value."""
  h_lte: Int

  """All values greater than the given value."""
  h_gt: Int

  """All values greater than or equal the given value."""
  h_gte: Int
  i: String

  """All values that are not equal to given value."""
  i_not: String

  """All values that are contained in given list."""
  i_in: [String!]

  """All values that are not contained in given list."""
  i_not_in: [String!]

  """All values less than the given value."""
  i_lt: String

  """All values less than or equal the given value."""
  i_lte: String

  """All values greater than the given value."""
  i_gt: String

  """All values greater than or equal the given value."""
  i_gte: String

  """All values containing the given string."""
  i_contains: String

  """All values not containing the given string."""
  i_not_contains: String

  """All values starting with the given string."""
  i_starts_with: String

  """All values not starting with the given string."""
  i_not_starts_with: String

  """All values ending with the given string."""
  i_ends_with: String

  """All values not ending with the given string."""
  i_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isDraggable: Boolean

  """All values that are not equal to given value."""
  isDraggable_not: Boolean
  isResizable: Boolean

  """All values that are not equal to given value."""
  isResizable_not: Boolean
  maxH: Int

  """All values that are not equal to given value."""
  maxH_not: Int

  """All values that are contained in given list."""
  maxH_in: [Int!]

  """All values that are not contained in given list."""
  maxH_not_in: [Int!]

  """All values less than the given value."""
  maxH_lt: Int

  """All values less than or equal the given value."""
  maxH_lte: Int

  """All values greater than the given value."""
  maxH_gt: Int

  """All values greater than or equal the given value."""
  maxH_gte: Int
  maxW: Int

  """All values that are not equal to given value."""
  maxW_not: Int

  """All values that are contained in given list."""
  maxW_in: [Int!]

  """All values that are not contained in given list."""
  maxW_not_in: [Int!]

  """All values less than the given value."""
  maxW_lt: Int

  """All values less than or equal the given value."""
  maxW_lte: Int

  """All values greater than the given value."""
  maxW_gt: Int

  """All values greater than or equal the given value."""
  maxW_gte: Int
  minH: Int

  """All values that are not equal to given value."""
  minH_not: Int

  """All values that are contained in given list."""
  minH_in: [Int!]

  """All values that are not contained in given list."""
  minH_not_in: [Int!]

  """All values less than the given value."""
  minH_lt: Int

  """All values less than or equal the given value."""
  minH_lte: Int

  """All values greater than the given value."""
  minH_gt: Int

  """All values greater than or equal the given value."""
  minH_gte: Int
  minW: Int

  """All values that are not equal to given value."""
  minW_not: Int

  """All values that are contained in given list."""
  minW_in: [Int!]

  """All values that are not contained in given list."""
  minW_not_in: [Int!]

  """All values less than the given value."""
  minW_lt: Int

  """All values less than or equal the given value."""
  minW_lte: Int

  """All values greater than the given value."""
  minW_gt: Int

  """All values greater than or equal the given value."""
  minW_gte: Int
  moved: Boolean

  """All values that are not equal to given value."""
  moved_not: Boolean
  static: Boolean

  """All values that are not equal to given value."""
  static_not: Boolean
  type: SectionTypes

  """All values that are not equal to given value."""
  type_not: SectionTypes

  """All values that are contained in given list."""
  type_in: [SectionTypes!]

  """All values that are not contained in given list."""
  type_not_in: [SectionTypes!]
  w: Int

  """All values that are not equal to given value."""
  w_not: Int

  """All values that are contained in given list."""
  w_in: [Int!]

  """All values that are not contained in given list."""
  w_not_in: [Int!]

  """All values less than the given value."""
  w_lt: Int

  """All values less than or equal the given value."""
  w_lte: Int

  """All values greater than the given value."""
  w_gt: Int

  """All values greater than or equal the given value."""
  w_gte: Int
  x: Int

  """All values that are not equal to given value."""
  x_not: Int

  """All values that are contained in given list."""
  x_in: [Int!]

  """All values that are not contained in given list."""
  x_not_in: [Int!]

  """All values less than the given value."""
  x_lt: Int

  """All values less than or equal the given value."""
  x_lte: Int

  """All values greater than the given value."""
  x_gt: Int

  """All values greater than or equal the given value."""
  x_gte: Int
  y: Int

  """All values that are not equal to given value."""
  y_not: Int

  """All values that are contained in given list."""
  y_in: [Int!]

  """All values that are not contained in given list."""
  y_not_in: [Int!]

  """All values less than the given value."""
  y_lt: Int

  """All values less than or equal the given value."""
  y_lte: Int

  """All values greater than the given value."""
  y_gt: Int

  """All values greater than or equal the given value."""
  y_gte: Int
  offer: OfferWhereInput
  menu: MenuWhereInput
}

input SectionItemWhereUniqueInput {
  id: ID
}

enum SectionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  showPdf_ASC
  showPdf_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SectionPreviousValues {
  id: ID!
  name: String
  showPdf: Boolean
}

type SectionSubscriptionPayload {
  mutation: MutationType!
  node: Section
  updatedFields: [String!]
  previousValues: SectionPreviousValues
}

input SectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SectionWhereInput
}

enum SectionTypes {
  Title
  Subtitle
  Subheading
  Text
  Menu
  Budget
}

input SectionUpdateInput {
  name: String
  showPdf: Boolean
  itemProposals: ItemProposalUpdateManyWithoutSectionInput
  menu: MenuUpdateOneWithoutSectionsInput
}

input SectionUpdateManyWithoutMenuInput {
  create: [SectionCreateWithoutMenuInput!]
  connect: [SectionWhereUniqueInput!]
  disconnect: [SectionWhereUniqueInput!]
  delete: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutMenuInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutMenuInput!]
}

input SectionUpdateOneWithoutItemProposalsInput {
  create: SectionCreateWithoutItemProposalsInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SectionUpdateWithoutItemProposalsDataInput
  upsert: SectionUpsertWithoutItemProposalsInput
}

input SectionUpdateWithoutItemProposalsDataInput {
  name: String
  showPdf: Boolean
  menu: MenuUpdateOneWithoutSectionsInput
}

input SectionUpdateWithoutMenuDataInput {
  name: String
  showPdf: Boolean
  itemProposals: ItemProposalUpdateManyWithoutSectionInput
}

input SectionUpdateWithWhereUniqueWithoutMenuInput {
  where: SectionWhereUniqueInput!
  data: SectionUpdateWithoutMenuDataInput!
}

input SectionUpsertWithoutItemProposalsInput {
  update: SectionUpdateWithoutItemProposalsDataInput!
  create: SectionCreateWithoutItemProposalsInput!
}

input SectionUpsertWithWhereUniqueWithoutMenuInput {
  where: SectionWhereUniqueInput!
  update: SectionUpdateWithoutMenuDataInput!
  create: SectionCreateWithoutMenuInput!
}

input SectionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  showPdf: Boolean

  """All values that are not equal to given value."""
  showPdf_not: Boolean
  itemProposals_every: ItemProposalWhereInput
  itemProposals_some: ItemProposalWhereInput
  itemProposals_none: ItemProposalWhereInput
  menu: MenuWhereInput
}

input SectionWhereUniqueInput {
  id: ID
}

enum StatusOffer {
  Accepted
  Rejected
  Pending
  Template
  ChangedAfterAccepted
}

type Stuff implements Node {
  eventStuffs(where: EventStuffWhereInput, orderBy: EventStuffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventStuff!]
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type StuffConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StuffEdge]!
  aggregate: AggregateStuff!
}

input StuffCreateInput {
  name: String!
  eventStuffs: EventStuffCreateManyWithoutStuffInput
}

input StuffCreateOneWithoutEventStuffsInput {
  create: StuffCreateWithoutEventStuffsInput
  connect: StuffWhereUniqueInput
}

input StuffCreateWithoutEventStuffsInput {
  name: String!
}

"""An edge in a connection."""
type StuffEdge {
  """The item at the end of the edge."""
  node: Stuff!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StuffOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StuffPreviousValues {
  id: ID!
  name: String!
}

type StuffSubscriptionPayload {
  mutation: MutationType!
  node: Stuff
  updatedFields: [String!]
  previousValues: StuffPreviousValues
}

input StuffSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StuffSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StuffSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StuffSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StuffWhereInput
}

input StuffUpdateInput {
  name: String
  eventStuffs: EventStuffUpdateManyWithoutStuffInput
}

input StuffUpdateOneWithoutEventStuffsInput {
  create: StuffCreateWithoutEventStuffsInput
  connect: StuffWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StuffUpdateWithoutEventStuffsDataInput
  upsert: StuffUpsertWithoutEventStuffsInput
}

input StuffUpdateWithoutEventStuffsDataInput {
  name: String
}

input StuffUpsertWithoutEventStuffsInput {
  update: StuffUpdateWithoutEventStuffsDataInput!
  create: StuffCreateWithoutEventStuffsInput!
}

input StuffWhereInput {
  """Logical AND on all given filters."""
  AND: [StuffWhereInput!]

  """Logical OR on all given filters."""
  OR: [StuffWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StuffWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  eventStuffs_every: EventStuffWhereInput
  eventStuffs_some: EventStuffWhereInput
  eventStuffs_none: EventStuffWhereInput
}

input StuffWhereUniqueInput {
  id: ID
}

type Subscription {
  client(where: ClientSubscriptionWhereInput): ClientSubscriptionPayload
  communication(where: CommunicationSubscriptionWhereInput): CommunicationSubscriptionPayload
  offer(where: OfferSubscriptionWhereInput): OfferSubscriptionPayload
  itemTranslation(where: ItemTranslationSubscriptionWhereInput): ItemTranslationSubscriptionPayload
  itemProposal(where: ItemProposalSubscriptionWhereInput): ItemProposalSubscriptionPayload
  itemProposalFlag(where: ItemProposalFlagSubscriptionWhereInput): ItemProposalFlagSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  section(where: SectionSubscriptionWhereInput): SectionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  clientContact(where: ClientContactSubscriptionWhereInput): ClientContactSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  budget(where: BudgetSubscriptionWhereInput): BudgetSubscriptionPayload
  budgetLine(where: BudgetLineSubscriptionWhereInput): BudgetLineSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  employeeEstimation(where: EmployeeEstimationSubscriptionWhereInput): EmployeeEstimationSubscriptionPayload
  eventStuff(where: EventStuffSubscriptionWhereInput): EventStuffSubscriptionPayload
  eventType(where: EventTypeSubscriptionWhereInput): EventTypeSubscriptionPayload
  invoice(where: InvoiceSubscriptionWhereInput): InvoiceSubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  placeContact(where: PlaceContactSubscriptionWhereInput): PlaceContactSubscriptionPayload
  sectionItem(where: SectionItemSubscriptionWhereInput): SectionItemSubscriptionPayload
  stuff(where: StuffSubscriptionWhereInput): StuffSubscriptionPayload
  tax(where: TaxSubscriptionWhereInput): TaxSubscriptionPayload
  vehicle(where: VehicleSubscriptionWhereInput): VehicleSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  menu(where: MenuSubscriptionWhereInput): MenuSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
}

type Tax implements Node {
  budgets(where: BudgetWhereInput, orderBy: BudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Budget!]
  budgetLines(where: BudgetLineWhereInput, orderBy: BudgetLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BudgetLine!]
  id: ID!
  name: String!
  value: Float!
}

"""A connection to a list of items."""
type TaxConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaxEdge]!
  aggregate: AggregateTax!
}

input TaxCreateInput {
  name: String!
  value: Float!
  budgets: BudgetCreateManyWithoutTaxInput
  budgetLines: BudgetLineCreateManyWithoutTaxInput
}

input TaxCreateOneWithoutBudgetLinesInput {
  create: TaxCreateWithoutBudgetLinesInput
  connect: TaxWhereUniqueInput
}

input TaxCreateOneWithoutBudgetsInput {
  create: TaxCreateWithoutBudgetsInput
  connect: TaxWhereUniqueInput
}

input TaxCreateWithoutBudgetLinesInput {
  name: String!
  value: Float!
  budgets: BudgetCreateManyWithoutTaxInput
}

input TaxCreateWithoutBudgetsInput {
  name: String!
  value: Float!
  budgetLines: BudgetLineCreateManyWithoutTaxInput
}

"""An edge in a connection."""
type TaxEdge {
  """The item at the end of the edge."""
  node: Tax!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaxOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TaxPreviousValues {
  id: ID!
  name: String!
  value: Float!
}

type TaxSubscriptionPayload {
  mutation: MutationType!
  node: Tax
  updatedFields: [String!]
  previousValues: TaxPreviousValues
}

input TaxSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaxSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaxSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaxSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaxWhereInput
}

input TaxUpdateInput {
  name: String
  value: Float
  budgets: BudgetUpdateManyWithoutTaxInput
  budgetLines: BudgetLineUpdateManyWithoutTaxInput
}

input TaxUpdateOneWithoutBudgetLinesInput {
  create: TaxCreateWithoutBudgetLinesInput
  connect: TaxWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TaxUpdateWithoutBudgetLinesDataInput
  upsert: TaxUpsertWithoutBudgetLinesInput
}

input TaxUpdateOneWithoutBudgetsInput {
  create: TaxCreateWithoutBudgetsInput
  connect: TaxWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TaxUpdateWithoutBudgetsDataInput
  upsert: TaxUpsertWithoutBudgetsInput
}

input TaxUpdateWithoutBudgetLinesDataInput {
  name: String
  value: Float
  budgets: BudgetUpdateManyWithoutTaxInput
}

input TaxUpdateWithoutBudgetsDataInput {
  name: String
  value: Float
  budgetLines: BudgetLineUpdateManyWithoutTaxInput
}

input TaxUpsertWithoutBudgetLinesInput {
  update: TaxUpdateWithoutBudgetLinesDataInput!
  create: TaxCreateWithoutBudgetLinesInput!
}

input TaxUpsertWithoutBudgetsInput {
  update: TaxUpdateWithoutBudgetsDataInput!
  create: TaxCreateWithoutBudgetsInput!
}

input TaxWhereInput {
  """Logical AND on all given filters."""
  AND: [TaxWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaxWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaxWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  budgets_every: BudgetWhereInput
  budgets_some: BudgetWhereInput
  budgets_none: BudgetWhereInput
  budgetLines_every: BudgetLineWhereInput
  budgetLines_some: BudgetLineWhereInput
  budgetLines_none: BudgetLineWhereInput
}

input TaxWhereUniqueInput {
  id: ID
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  role: Role!
  updatedAt: DateTime!
  email: String!
  image: String
  name: String!
  password: String!
  employee(where: EmployeeWhereInput): Employee
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job!]
  language: LanguageEnum
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  role: Role!
  email: String!
  image: String
  name: String!
  password: String!
  language: LanguageEnum
  employee: EmployeeCreateOneWithoutUserInput
  jobs: JobCreateManyWithoutUsersInput
}

input UserCreateManyWithoutJobsInput {
  create: [UserCreateWithoutJobsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEmployeeInput {
  create: UserCreateWithoutEmployeeInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmployeeInput {
  role: Role!
  email: String!
  image: String
  name: String!
  password: String!
  language: LanguageEnum
  jobs: JobCreateManyWithoutUsersInput
}

input UserCreateWithoutJobsInput {
  role: Role!
  email: String!
  image: String
  name: String!
  password: String!
  language: LanguageEnum
  employee: EmployeeCreateOneWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  image_ASC
  image_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  language_ASC
  language_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  id: ID!
  role: Role!
  updatedAt: DateTime!
  email: String!
  image: String
  name: String!
  password: String!
  language: LanguageEnum
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  role: Role
  email: String
  image: String
  name: String
  password: String
  language: LanguageEnum
  employee: EmployeeUpdateOneWithoutUserInput
  jobs: JobUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutJobsInput {
  create: [UserCreateWithoutJobsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutJobsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutJobsInput!]
}

input UserUpdateOneWithoutEmployeeInput {
  create: UserCreateWithoutEmployeeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEmployeeDataInput
  upsert: UserUpsertWithoutEmployeeInput
}

input UserUpdateWithoutEmployeeDataInput {
  role: Role
  email: String
  image: String
  name: String
  password: String
  language: LanguageEnum
  jobs: JobUpdateManyWithoutUsersInput
}

input UserUpdateWithoutJobsDataInput {
  role: Role
  email: String
  image: String
  name: String
  password: String
  language: LanguageEnum
  employee: EmployeeUpdateOneWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutJobsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutJobsDataInput!
}

input UserUpsertWithoutEmployeeInput {
  update: UserUpdateWithoutEmployeeDataInput!
  create: UserCreateWithoutEmployeeInput!
}

input UserUpsertWithWhereUniqueWithoutJobsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutJobsDataInput!
  create: UserCreateWithoutJobsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  language: LanguageEnum

  """All values that are not equal to given value."""
  language_not: LanguageEnum

  """All values that are contained in given list."""
  language_in: [LanguageEnum!]

  """All values that are not contained in given list."""
  language_not_in: [LanguageEnum!]
  employee: EmployeeWhereInput
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vehicle implements Node {
  color: String
  description: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  id: ID!
  name: String!
  plate: String!
  year: Int
}

"""A connection to a list of items."""
type VehicleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleEdge]!
  aggregate: AggregateVehicle!
}

input VehicleCreateInput {
  color: String
  description: String
  name: String!
  plate: String!
  year: Int
  events: EventCreateManyWithoutVehiclesInput
}

input VehicleCreateManyWithoutEventsInput {
  create: [VehicleCreateWithoutEventsInput!]
  connect: [VehicleWhereUniqueInput!]
}

input VehicleCreateWithoutEventsInput {
  color: String
  description: String
  name: String!
  plate: String!
  year: Int
}

"""An edge in a connection."""
type VehicleEdge {
  """The item at the end of the edge."""
  node: Vehicle!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VehicleOrderByInput {
  color_ASC
  color_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  plate_ASC
  plate_DESC
  year_ASC
  year_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VehiclePreviousValues {
  color: String
  description: String
  id: ID!
  name: String!
  plate: String!
  year: Int
}

type VehicleSubscriptionPayload {
  mutation: MutationType!
  node: Vehicle
  updatedFields: [String!]
  previousValues: VehiclePreviousValues
}

input VehicleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleWhereInput
}

input VehicleUpdateInput {
  color: String
  description: String
  name: String
  plate: String
  year: Int
  events: EventUpdateManyWithoutVehiclesInput
}

input VehicleUpdateManyWithoutEventsInput {
  create: [VehicleCreateWithoutEventsInput!]
  connect: [VehicleWhereUniqueInput!]
  disconnect: [VehicleWhereUniqueInput!]
  delete: [VehicleWhereUniqueInput!]
  update: [VehicleUpdateWithWhereUniqueWithoutEventsInput!]
  upsert: [VehicleUpsertWithWhereUniqueWithoutEventsInput!]
}

input VehicleUpdateWithoutEventsDataInput {
  color: String
  description: String
  name: String
  plate: String
  year: Int
}

input VehicleUpdateWithWhereUniqueWithoutEventsInput {
  where: VehicleWhereUniqueInput!
  data: VehicleUpdateWithoutEventsDataInput!
}

input VehicleUpsertWithWhereUniqueWithoutEventsInput {
  where: VehicleWhereUniqueInput!
  update: VehicleUpdateWithoutEventsDataInput!
  create: VehicleCreateWithoutEventsInput!
}

input VehicleWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleWhereInput!]
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  plate: String

  """All values that are not equal to given value."""
  plate_not: String

  """All values that are contained in given list."""
  plate_in: [String!]

  """All values that are not contained in given list."""
  plate_not_in: [String!]

  """All values less than the given value."""
  plate_lt: String

  """All values less than or equal the given value."""
  plate_lte: String

  """All values greater than the given value."""
  plate_gt: String

  """All values greater than or equal the given value."""
  plate_gte: String

  """All values containing the given string."""
  plate_contains: String

  """All values not containing the given string."""
  plate_not_contains: String

  """All values starting with the given string."""
  plate_starts_with: String

  """All values not starting with the given string."""
  plate_not_starts_with: String

  """All values ending with the given string."""
  plate_ends_with: String

  """All values not ending with the given string."""
  plate_not_ends_with: String
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input VehicleWhereUniqueInput {
  id: ID
}
